const t=JSON.parse('{"key":"v-2076b0a6","path":"/views/Books/Front-end/TypescriptMaster/project/compilationContext.html","title":"编译上下文","lang":"zh-CN","frontmatter":{"description":"编译上下文 编译上下文算是一个比较花哨的术语，可以用它来给文件分组，告诉 TypeScript 哪些文件是有效的，哪些是无效的。除了有效文件所携带信息外，编译上下文还包含有正在被使用的编译选项的信息。定义这种逻辑分组，一个比较好的方式是使用 tsconfig.json 文件。 tsconfig.json 基础 开始使用 tsconfig.json 是一件比较容易的事，你仅仅需要写下： {}","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/project/compilationContext.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"编译上下文"}],["meta",{"property":"og:description","content":"编译上下文 编译上下文算是一个比较花哨的术语，可以用它来给文件分组，告诉 TypeScript 哪些文件是有效的，哪些是无效的。除了有效文件所携带信息外，编译上下文还包含有正在被使用的编译选项的信息。定义这种逻辑分组，一个比较好的方式是使用 tsconfig.json 文件。 tsconfig.json 基础 开始使用 tsconfig.json 是一件比较容易的事，你仅仅需要写下： {}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译上下文\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"tsconfig.json","slug":"tsconfig-json","link":"#tsconfig-json","children":[{"level":3,"title":"基础","slug":"基础","link":"#基础","children":[]},{"level":3,"title":"编译选项","slug":"编译选项","link":"#编译选项","children":[]},{"level":3,"title":"TypeScript 编译","slug":"typescript-编译","link":"#typescript-编译","children":[]}]},{"level":2,"title":"指定文件","slug":"指定文件","link":"#指定文件","children":[]}],"git":{},"readingTime":{"minutes":3.86,"words":1159},"filePathRelative":"views/Books/Front-end/TypescriptMaster/project/compilationContext.md","excerpt":"<h1> 编译上下文</h1>\\n<p>编译上下文算是一个比较花哨的术语，可以用它来给文件分组，告诉 TypeScript 哪些文件是有效的，哪些是无效的。除了有效文件所携带信息外，编译上下文还包含有正在被使用的编译选项的信息。定义这种逻辑分组，一个比较好的方式是使用 <code>tsconfig.json</code> 文件。</p>\\n<h2> tsconfig.json</h2>\\n<h3> 基础</h3>\\n<p>开始使用 <code>tsconfig.json</code> 是一件比较容易的事，你仅仅需要写下：</p>\\n<div class=\\"language-json line-numbers-mode\\" data-ext=\\"json\\"><pre class=\\"language-json\\"><code><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
