import{_ as c,X as i,Y as l,Z as n,$ as s,a0 as e,a5 as d,a4 as a,E as p}from"./framework-d8252107.js";const r={},u=a(`<h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h1><h2 id="全局模块" tabindex="-1"><a class="header-anchor" href="#全局模块" aria-hidden="true">#</a> 全局模块</h2><p>在默认情况下，当你开始在一个新的 TypeScript 文件中写下代码时，它处于全局命名空间中。如在 foo.ts 里的以下代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你在相同的项目里创建了一个新的文件 <code>bar.ts</code>，TypeScript 类型系统将会允许你使用变量 <code>foo</code>，就好像它在全局可用一样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// allowed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>毋庸置疑，使用全局变量空间是危险的，因为它会与文件内的代码命名冲突。我们推荐使用下文中将要提到的文件模块。</p><h2 id="文件模块" tabindex="-1"><a class="header-anchor" href="#文件模块" aria-hidden="true">#</a> 文件模块</h2><p>文件模块也被称为外部模块。如果在你的 TypeScript 文件的根级别位置含有 <code>import</code> 或者 <code>export</code>，那么它会在这个文件中创建一个本地的作用域。因此，我们需要把上文 <code>foo.ts</code> 改成如下方式（注意 <code>export</code> 用法）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在全局命名空间里，我们不再有 <code>foo</code>，这可以通过创建一个新文件 <code>bar.ts</code> 来证明：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// ERROR: &quot;cannot find name &#39;foo&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想在 <code>bar.ts</code> 里使用来自 <code>foo.ts</code> 的内容，你必须显式地导入它，更新后的 <code>bar.ts</code> 如下所示。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// allow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>bar.ts</code> 文件里使用 <code>import</code> 时，它不仅允许你使用从其他文件导入的内容，还会将此文件 <code>bar.ts</code> 标记为一个模块，文件内定义的声明也不会“污染”全局命名空间</p><h2 id="文件模块详情" tabindex="-1"><a class="header-anchor" href="#文件模块详情" aria-hidden="true">#</a> 文件模块详情</h2><p>文件模块拥有强大的功能和较强的可用性。下面我们来讨论它的功能及一些用法。</p><h3 id="澄清-commonjs-amd-es-modules-others" tabindex="-1"><a class="header-anchor" href="#澄清-commonjs-amd-es-modules-others" aria-hidden="true">#</a> 澄清：commonjs, amd, es modules, others</h3><p>首先，我们需要澄清这些模块系统的不一致性。我将会提供给你我当前的建议，以及消除一些你的顾虑。</p><p>你可以根据不同的 <code>module</code> 选项来把 TypeScript 编译成不同的 JavaScript 模块类型，这有一些你可以忽略的东西：</p><ul><li>AMD：不要使用它，它仅能在浏览器工作；</li><li>SystemJS：这是一个好的实验，已经被 ES 模块替代；</li><li>ES 模块：它并没有准备好。</li></ul><p>使用 <code>module: commonjs</code> 选项来替代这些模式，将会是一个好的主意。</p><p>怎么书写 TypeScript 模块呢？，这也是一件让人困惑的事。在今天我们应该这么做：</p><ul><li>放弃使用 <code>import/require</code> 语法即 <code>import foo = require(&#39;foo&#39;)</code> 写法</li><li>推荐使用 ES 模块语法</li></ul><p>这很酷，接下来，让我们看看 ES 模块语法。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>module: commonjs</code> 选项以及使用 ES 模块语法导入、导出、编写模块。</p></div><h3 id="es-模块语法" tabindex="-1"><a class="header-anchor" href="#es-模块语法" aria-hidden="true">#</a> ES 模块语法</h3><ul><li>使用 <code>export</code> 关键字导出一个变量或类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// foo.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">someType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>export</code> 的写法除了上面这种，还有另外一种：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// foo.ts</span>
<span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">someType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> someVar<span class="token punctuation">,</span> someType <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>你也可以用重命名变量的方式导出：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// foo.ts</span>
<span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>import</code> 关键字导入一个变量或者是一个类型：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// bar.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> someVar<span class="token punctuation">,</span> someType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过重命名的方式导入变量或者类型：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// bar.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// bar.ts</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 你可以使用 \`foo.someVar\` 和 \`foo.someType\` 以及其他任何从 \`foo\` 导出的变量或者类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只导入模块：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;core-js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 一个普通的 polyfill 库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>从其他模块导入后整体导出：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>从其他模块导入后，部分导出：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过重命名，部分导出从另一个模块导入的项目：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> someVar <span class="token keyword">as</span> aDifferentName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="默认导入-导出" tabindex="-1"><a class="header-anchor" href="#默认导入-导出" aria-hidden="true">#</a> 默认导入／导出</h4><p>我并不喜欢用默认导出，虽然有默认导出的语法：</p><ul><li>使用 <code>export default</code><ul><li>在一个变量之前（不需要使用 <code>let/const/var</code>）；</li><li>在一个函数之前；</li><li>在一个类之前。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// some var</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>someVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// some function</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// some class</span>
<span class="token class-name"><span class="token keyword">export</span></span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">someClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入使用 <code>import someName from &#39;someModule&#39;</code> 语法（你可以根据需要为导入命名）：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> someLocalNameForThisFile <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模块路径" tabindex="-1"><a class="header-anchor" href="#模块路径" aria-hidden="true">#</a> 模块路径</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你需要使用 <code>moduleResolution: node</code> 选项，你应该将此选项放入你的配置文件中。如果你使用了 <code>module: commonjs</code> 选项， <code>moduleResolution: node</code> 将会默认开启。</p></div><p>这里存在两种截然不同的模块：</p><ul><li>相对模块路径（路径以 <code>.</code> 开头，例如：<code>./someFile</code> 或者 <code>../../someFolder/someFile</code> 等）；</li><li>其他动态查找模块（如：<code>core-js</code>，<code>typestyle</code>，<code>react</code> 或者甚至是 <code>react/core</code> 等）。</li></ul><p>它们的主要区别在于系统如何解析模块。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我将会使用一个概念性术语，<code>place</code> -- 将在提及查找模式后解释它。</p></div><h4 id="相对模块路径" tabindex="-1"><a class="header-anchor" href="#相对模块路径" aria-hidden="true">#</a> 相对模块路径</h4><p>这很简单，仅仅是按照相对路径来就可以了：</p><ul><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;./foo&#39;</code>，那么 <code>foo</code> 文件必须与 <code>bar.ts</code> 文件存在于相同的文件夹下</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../foo&#39;</code>，那么 <code>foo</code> 文件所存在的地方必须是 <code>bar.ts</code> 的上一级目录；</li><li>如果文件 <code>bar.ts</code> 中含有 <code>import * as foo from &#39;../someFolder/foo&#39;</code>，那么 <code>foo</code> 文件所在的文件夹 <code>someFolder</code> 必须与 <code>bar.ts</code> 文件所在文件夹在相同的目录下。</li></ul><p>你还可以思考一下其他相对路径导入的场景。😃</p><h4 id="动态查找" tabindex="-1"><a class="header-anchor" href="#动态查找" aria-hidden="true">#</a> 动态查找</h4>`,64),k={href:"https://nodejs.org/api/modules.html#modules_all_together",target:"_blank",rel:"noopener noreferrer"},m=a(`<ul><li>当你使用 <code>import * as foo from &#39;foo&#39;</code>，将会按如下顺序查找模块： <ul><li><code>./node_modules/foo</code></li><li><code>../node_modules/foo</code></li><li><code>../../node_modules/foo</code></li><li>直到系统的根目录</li></ul></li><li>当你使用 <code>import * as foo from &#39;something/foo&#39;</code>，将会按照如下顺序查找内容 <ul><li><code>./node_modules/something/foo</code></li><li><code>../node_modules/something/foo</code></li><li><code>../../node_modules/something/foo</code></li><li>直到系统的根目录</li></ul></li></ul><h3 id="什么是-place" tabindex="-1"><a class="header-anchor" href="#什么是-place" aria-hidden="true">#</a> 什么是 <code>place</code></h3><p>当我提及被检查的 <code>place</code> 时，我想表达的是在这个 <code>place</code> 上，TypeScript 将会检查以下内容（例如一个 <code>foo</code> 的 <code>place</code>）：</p><ul><li>如果这个 <code>place</code> 表示一个文件，如：<code>foo.ts</code>，欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个文件 <code>foo/index.ts</code>，欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个 <code>foo/package.json</code> 文件，在该文件中指定 <code>types</code> 的文件存在，那么就欢呼！</li><li>否则，如果这个 <code>place</code> 是一个文件夹，并且存在一个 <code>package.json</code> 文件，在该文件中指定 <code>main</code> 的文件存在，那么就欢呼！</li></ul><p>从文件类型上来说，我实际上是指 <code>.ts</code>， <code>.d.ts</code> 或者 <code>.js</code></p><p>就是这样，现在你已经是一个模块查找专家（这并不是一个小小的成功）。</p><h3 id="重写类型的动态查找" tabindex="-1"><a class="header-anchor" href="#重写类型的动态查找" aria-hidden="true">#</a> 重写类型的动态查找</h3><p>在你的项目里，你可以通过 <code>declare module &#39;somePath&#39;</code> 声明一个全局模块的方式，来解决查找模块路径的问题。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">{</span>
  <span class="token comment">// some variable declarations</span>
  <span class="token keyword">export</span> <span class="token keyword">var</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着 ：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// anyOtherTsFileInYourProject.ts</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// TypeScript 将假设（在没有做其他查找的情况下）</span>
<span class="token comment">// foo 是 { bar: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-require-仅仅是导入类型" tabindex="-1"><a class="header-anchor" href="#import-require-仅仅是导入类型" aria-hidden="true">#</a> <code>import/require</code> 仅仅是导入类型</h3><p>以下导入语法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它实际上只做了两件事：</p><ul><li>导入 foo 模块的所有类型信息；</li><li>确定 foo 模块运行时的依赖关系。</li></ul>`,16),v=a(`<p>如果你没有把导入的名称当做变量声明空间来用，在编译成 JavaScript 时，导入的模块将会被完全移除。这最好用例子来解释，下面我们将会给出一些示例。</p><h4 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子 1</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会编译成 JavaScript：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>这是正确的，一个没有被使用的空文件。</p><h4 id="例子-2" tabindex="-1"><a class="header-anchor" href="#例子-2" aria-hidden="true">#</a> 例子 2</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar<span class="token operator">:</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将会被编译成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> bar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为 foo （或者其他任何属性如：<code>foo.bas</code>）没有被当做一个变量使用。</p><h4 id="例子-3" tabindex="-1"><a class="header-anchor" href="#例子-3" aria-hidden="true">#</a> 例子 3</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将会被编译成（假设是 commonjs）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 <code>foo</code> 被当做变量使用了。</p><h4 id="使用例子-懒加载" tabindex="-1"><a class="header-anchor" href="#使用例子-懒加载" aria-hidden="true">#</a> 使用例子：懒加载</h4><p>类型推断需要提前完成，这意味着，如果你想在 <code>bar</code> 文件里，使用从其他文件 <code>foo</code> 导出的类型，你将不得不这么做：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar<span class="token operator">:</span> foo<span class="token punctuation">.</span>SomeType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在某些情景下，你只想在需要时加载模块 <code>foo</code>，此时你需要仅在类型注解中使用导入的模块名称，而<strong>不</strong>是在变量中使用。在编译成 JavaScript 时，这些将会被移除。接着，你可以手动导入你需要的模块。</p><p>作为一个例子，考虑以下基于 <code>commonjs</code> 的代码，我们仅在一个函数内导入 <code>foo</code> 模块：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这是懒加载 foo，原始的加载仅仅用来做类型注解</span>
  <span class="token keyword">const</span> _foo<span class="token operator">:</span> <span class="token keyword">typeof</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 现在，你可以使用 \`_foo\` 替代 \`foo\` 来作为一个变量使用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个同样简单的 <code>amd</code> 模块（使用 requirejs）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这是懒加载 foo，原始的加载仅仅用来做类型注解</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_foo<span class="token operator">:</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 现在，你可以使用 \`_foo\` 替代 \`foo\` 来作为一个变量使用</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些通常在以下情景使用：</p><ul><li>在 web app 里， 当你在特定路由上加载 JavaScript 时；</li><li>在 node 应用里，当你只想加载特定模块，用来加快启动速度时。</li></ul><h4 id="使用例子-打破循环依赖" tabindex="-1"><a class="header-anchor" href="#使用例子-打破循环依赖" aria-hidden="true">#</a> 使用例子：打破循环依赖</h4><p>类似于懒加载的使用用例，某些模块加载器（commonjs/node 和 amd/requirejs）不能很好的处理循环依赖。在这种情况下，一方面我们使用延迟加载代码，并在另一方面预先加载模块是很实用的。</p><h4 id="使用例子-确保导入" tabindex="-1"><a class="header-anchor" href="#使用例子-确保导入" aria-hidden="true">#</a> 使用例子：确保导入</h4>`,29),b={href:"https://codemirror.net/doc/manual.html#addons",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"import/require",-1),y=n("code",null,"ensureImport",-1),f=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> bar <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> bas <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./bas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ensureImport<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> foo <span class="token operator">||</span> bar <span class="token operator">||</span> bas<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="global-d-ts" tabindex="-1"><a class="header-anchor" href="#global-d-ts" aria-hidden="true">#</a> global.d.ts</h2><p>在上文中，当我们讨论文件模块时，比较了全局变量与文件模块，并且我们推荐使用基于文件的模块，而不是选择污染全局命名空间。</p><p>然而，如果你的团队里有 TypeScript 初学者，你可以提供他们一个 <code>global.d.ts</code> 文件，用来将一些接口或者类型放入全局命名空间里，这些定义的接口和类型能在你的所有 TypeScript 代码里使用。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于任何需要编译成 <code>JavaScript</code> 的代码，我们强烈建议你放入文件模块里。</p></div><ul><li><code>global.d.ts</code> 是一种扩充 <code>lib.d.ts</code> 很好的方式，如果你需要的话。</li><li>当你从 <code>JS</code> 迁移到 <code>TS</code> 时，定义 <code>declare module &quot;some-library-you-dont-care-to-get-defs-for&quot;</code> 能让你快速开始。</li></ul>`,6);function g(w,x){const o=p("ExternalLinkIcon"),t=p("RouterLink");return i(),l("div",null,[u,n("p",null,[s("当导入路径不是相对路径时，模块解析将会模仿 "),n("a",k,[s("Node 模块解析策略"),e(o)]),s("，下面我将给出一个简单例子：")]),m,n("p",null,[s("你可以选择仅加载类型信息，而没有运行时的依赖关系。在继续之前，你可能需要重新阅读本书 "),e(t,{to:"/views/Books/Front-end/TypescriptMaster/project/declarationspaces.html"},{default:d(()=>[s("声明空间部分")]),_:1}),s(" 部分。")]),v,n("p",null,[s("当你加载一个模块，只是想引入其附加的作用（如：模块可能会注册一些像 "),n("a",b,[s("CodeMirror addons"),e(o)]),s("）时，然而，如果你仅仅是 "),h,s(" （导入）一些并没有与你的模块或者模块加载器有任何依赖的 JavaScript 代码，（如：webpack），经过 TypeScript 编译后，这些将会被完全忽视。在这种情况下，你可以使用一个 "),y,s(" 变量，来确保编译的 JavaScript 依赖与模块。如：")]),f])}const S=c(r,[["render",g],["__file","modules.html.vue"]]);export{S as default};
