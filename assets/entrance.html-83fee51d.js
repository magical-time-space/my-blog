const n=JSON.parse(`{"key":"v-fa022a32","path":"/views/Books/Front-end/JustVue2/compile/entrance.html","title":"编译入口","lang":"zh-CN","frontmatter":{"description":"编译入口 当我们使用 Runtime + Compiler 的 Vue.js，它的入口是 src/platforms/web/entry-runtime-with-compiler.js，看一下它对 $mount 函数的定义： const mount = Vue.prototype.$mount Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el &amp;&amp; query(el) /* istanbul ignore if */ if (el === document.body || el === document.documentElement) { p​rocess.env.NODE_ENV !== 'production' &amp;&amp; warn( \`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.\` ) return this } const options = this.$options // resolve template/el and convert to render function if (!options.render) { let template = options.template if (template) { if (typeof template === 'string') { if (template.charAt(0) === '#') { template = idToTemplate(template) /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; !template) { warn( \`Template element not found or is empty: \${options.template}\`, this ) } } } else if (template.nodeType) { template = template.innerHTML } else { if (p​rocess.env.NODE_ENV !== 'production') { warn('invalid template option:' + template, this) } return this } } else if (el) { template = getOuterHTML(el) } if (template) { /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; config.performance &amp;&amp; mark) { mark('compile') } const { render, staticRenderFns } = compileToFunctions(template, { shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments }, this) options.render = render options.staticRenderFns = staticRenderFns /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; config.performance &amp;&amp; mark) { mark('compile end') measure(\`vue \${this._name} compile\`, 'compile', 'compile end') } } } return mount.call(this, el, hydrating) }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/compile/entrance.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"编译入口"}],["meta",{"property":"og:description","content":"编译入口 当我们使用 Runtime + Compiler 的 Vue.js，它的入口是 src/platforms/web/entry-runtime-with-compiler.js，看一下它对 $mount 函数的定义： const mount = Vue.prototype.$mount Vue.prototype.$mount = function ( el?: string | Element, hydrating?: boolean ): Component { el = el &amp;&amp; query(el) /* istanbul ignore if */ if (el === document.body || el === document.documentElement) { p​rocess.env.NODE_ENV !== 'production' &amp;&amp; warn( \`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.\` ) return this } const options = this.$options // resolve template/el and convert to render function if (!options.render) { let template = options.template if (template) { if (typeof template === 'string') { if (template.charAt(0) === '#') { template = idToTemplate(template) /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; !template) { warn( \`Template element not found or is empty: \${options.template}\`, this ) } } } else if (template.nodeType) { template = template.innerHTML } else { if (p​rocess.env.NODE_ENV !== 'production') { warn('invalid template option:' + template, this) } return this } } else if (el) { template = getOuterHTML(el) } if (template) { /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; config.performance &amp;&amp; mark) { mark('compile') } const { render, staticRenderFns } = compileToFunctions(template, { shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments }, this) options.render = render options.staticRenderFns = staticRenderFns /* istanbul ignore if */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; config.performance &amp;&amp; mark) { mark('compile end') measure(\`vue \${this._name} compile\`, 'compile', 'compile end') } } } return mount.call(this, el, hydrating) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译入口\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":4.78,"words":1433},"filePathRelative":"views/Books/Front-end/JustVue2/compile/entrance.md","excerpt":"<h1> 编译入口</h1>\\n<p>当我们使用 Runtime + Compiler 的 Vue.js，它的入口是 <code>src/platforms/web/entry-runtime-with-compiler.js</code>，看一下它对 <code>$mount</code> 函数的定义：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> mount <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span>$mount\\n<span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">$mount</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token parameter\\">el<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> string <span class=\\"token operator\\">|</span> Element<span class=\\"token punctuation\\">,</span>\\n  hydrating<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> boolean</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> Component <span class=\\"token punctuation\\">{</span>\\n  el <span class=\\"token operator\\">=</span> el <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token comment\\">/* istanbul ignore if */</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el <span class=\\"token operator\\">===</span> document<span class=\\"token punctuation\\">.</span>body <span class=\\"token operator\\">||</span> el <span class=\\"token operator\\">===</span> document<span class=\\"token punctuation\\">.</span>documentElement<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">warn</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.</span><span class=\\"token template-punctuation string\\">\`</span></span>\\n    <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">const</span> options <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>$options\\n  <span class=\\"token comment\\">// resolve template/el and convert to render function</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>options<span class=\\"token punctuation\\">.</span>render<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> template <span class=\\"token operator\\">=</span> options<span class=\\"token punctuation\\">.</span>template\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> template <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'#'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          template <span class=\\"token operator\\">=</span> <span class=\\"token function\\">idToTemplate</span><span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token comment\\">/* istanbul ignore if */</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>template<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">warn</span><span class=\\"token punctuation\\">(</span>\\n              <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">Template element not found or is empty: </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>options<span class=\\"token punctuation\\">.</span>template<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">,</span>\\n              <span class=\\"token keyword\\">this</span>\\n            <span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">.</span>nodeType<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        template <span class=\\"token operator\\">=</span> template<span class=\\"token punctuation\\">.</span>innerHTML\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token function\\">warn</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'invalid template option:'</span> <span class=\\"token operator\\">+</span> template<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      template <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getOuterHTML</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">/* istanbul ignore if */</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> config<span class=\\"token punctuation\\">.</span>performance <span class=\\"token operator\\">&amp;&amp;</span> mark<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">mark</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'compile'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> render<span class=\\"token punctuation\\">,</span> staticRenderFns <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">compileToFunctions</span><span class=\\"token punctuation\\">(</span>template<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n        shouldDecodeNewlines<span class=\\"token punctuation\\">,</span>\\n        shouldDecodeNewlinesForHref<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">delimiters</span><span class=\\"token operator\\">:</span> options<span class=\\"token punctuation\\">.</span>delimiters<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">comments</span><span class=\\"token operator\\">:</span> options<span class=\\"token punctuation\\">.</span>comments\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span>\\n      options<span class=\\"token punctuation\\">.</span>render <span class=\\"token operator\\">=</span> render\\n      options<span class=\\"token punctuation\\">.</span>staticRenderFns <span class=\\"token operator\\">=</span> staticRenderFns\\n\\n      <span class=\\"token comment\\">/* istanbul ignore if */</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> config<span class=\\"token punctuation\\">.</span>performance <span class=\\"token operator\\">&amp;&amp;</span> mark<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">mark</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'compile end'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">measure</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">vue </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_name<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\"> compile</span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'compile'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'compile end'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">mount</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">,</span> hydrating<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
