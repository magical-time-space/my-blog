import{_ as p,X as r,Y as i,Z as n,$ as s,a0 as e,a5 as u,a4 as o,E as c}from"./framework-d8252107.js";const d={},h=n("p",null,"软件的设计是为了服务理念。只有懂了设计理念，才能明白为了实现这样的理念需要如何架构。",-1),k=n("p",null,[s("所以，在我们深入源码架构之前，先来聊聊"),n("code",null,"React"),s("理念。")],-1),_=n("h2",{id:"react理念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react理念","aria-hidden":"true"},"#"),s(" React理念")],-1),g={href:"https://zh-hans.reactjs.org/docs/thinking-in-react.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"React",-1),v=o(`<blockquote><p>我们认为，React 是用 JavaScript 构建<strong>快速响应</strong>的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。</p></blockquote><p>可见，关键是实现<code>快速响应</code>。那么制约<code>快速响应</code>的因素是什么呢？</p><p>我们日常使用App，浏览网页时，有两类场景会制约<code>快速响应</code>：</p><ul><li><p>当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。</p></li><li><p>发送网络请求后，由于需要等待数据返回才能进一步操作导致不能快速响应。</p></li></ul><p>这两类场景可以概括为：</p><ul><li><p>CPU的瓶颈</p></li><li><p>IO的瓶颈</p></li></ul><p><code>React</code>是如何解决这两个瓶颈的呢？</p><h2 id="cpu的瓶颈" tabindex="-1"><a class="header-anchor" href="#cpu的瓶颈" aria-hidden="true">#</a> CPU的瓶颈</h2><p>当项目变得庞大、组件数量繁多时，就容易遇到CPU的瓶颈。</p><p>考虑如下Demo，我们向视图中渲染3000个<code>li</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rootEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主流浏览器刷新频率为60Hz，即每（1000ms / 60Hz）16.6ms浏览器刷新一次。</p><p>我们知道，JS可以操作DOM，<code>GUI渲染线程</code>与<code>JS线程</code>是互斥的。所以<strong>JS脚本执行</strong>和<strong>浏览器布局、绘制</strong>不能同时执行。</p><p>在每16.6ms时间内，需要完成如下工作：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JS脚本执行 -----  样式布局 ----- 样式绘制
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当JS执行时间过长，超出了16.6ms，这次刷新就没有时间执行<strong>样式布局</strong>和<strong>样式绘制</strong>了。</p><p>在Demo中，由于组件数量繁多（3000个），JS脚本执行时间过长，页面掉帧，造成卡顿。</p><p>可以从打印的执行堆栈图看到，JS执行时间为73.65ms，远远多于一帧的时间。</p>`,18),b=["src"],f=n("p",null,"如何解决这个问题呢？",-1),S=n("code",null,"React",-1),R={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L119",target:"_blank",rel:"noopener noreferrer"},x=o("<p>当预留的时间不够用时，<code>React</code>将线程控制权交还给浏览器使其有时间渲染UI，<code>React</code>则等待下一帧时间到来继续被中断的工作。</p><blockquote><p>这种将长任务分拆到每一帧中，像蚂蚁搬家一样一次执行一小段任务的操作，被称为<code>时间切片</code>（time slice）</p></blockquote><p>接下来我们开启<code>Concurrent Mode</code>（后续章节会讲到，当前你只需了解开启后会启用<code>时间切片</code>）：</p>",3),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 通过使用ReactDOM.unstable_createRoot开启Concurrent Mode"),s(`
`),n("span",{class:"token comment"},"// ReactDOM.render(<App/>, rootEl);  "),s(`
ReactDOM`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unstable_createRoot"),n("span",{class:"token punctuation"},"("),s("rootEl"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"<"),s("App"),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,[s("此时我们的长任务被拆分到每一帧不同的"),n("code",null,"task"),s("中，"),n("code",null,"JS脚本"),s("执行时间大体在"),n("code",null,"5ms"),s("左右，这样浏览器就有剩余时间执行"),n("strong",null,"样式布局"),s("和"),n("strong",null,"样式绘制"),s("，减少掉帧的可能性。")],-1),J=["src"],D=n("p",null,[s("所以，解决"),n("code",null,"CPU瓶颈"),s("的关键是实现"),n("code",null,"时间切片"),s("，而"),n("code",null,"时间切片"),s("的关键是：将"),n("strong",null,"同步的更新"),s("变为"),n("strong",null,"可中断的异步更新"),s("。")],-1),C={class:"hint-container details"},I=n("summary",null,"同步更新 vs 异步更新 Demo",-1),B=n("p",null,[s("我们有个更新很耗时的大列表，让我们看看"),n("strong",null,"同步更新"),s("和"),n("strong",null,"异步更新"),s("时，输入框的响应速度")],-1),O=n("strong",null,"323",-1),y=n("p",null,[s("可以从Demo看到，当牺牲了列表的更新速度，"),n("code",null,"React"),s("大幅提高了输入响应速度，使交互更自然。")],-1),E=n("h2",{id:"io的瓶颈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#io的瓶颈","aria-hidden":"true"},"#"),s(" IO的瓶颈")],-1),U=n("p",null,[n("code",null,"网络延迟"),s("是前端开发者无法解决的。如何在"),n("code",null,"网络延迟"),s("客观存在的情况下，减少用户对"),n("code",null,"网络延迟"),s("的感知？")],-1),q=n("code",null,"React",-1),M={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-intro.html#putting-research-into-production",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,"这里我们以业界人机交互最顶尖的苹果举例，在IOS系统中：",-1),A=n("p",null,"点击“设置”面板中的“通用”，进入“通用”界面：",-1),V=["src"],L=n("p",null,"作为对比，再点击“设置”面板中的“Siri与搜索”，进入“Siri与搜索”界面：",-1),P=["src"],$=n("p",null,"你能感受到两者体验上的区别么？",-1),N=n("p",null,"事实上，点击“通用”后的交互是同步的，直接显示后续界面。而点击“Siri与搜索”后的交互是异步的，需要等待请求返回后再显示后续界面。但从用户感知来看，这两者的区别微乎其微。",-1),H=n("p",null,"这里的窍门在于：点击“Siri与搜索”后，先在当前页面停留了一小段时间，这一小段时间被用来请求数据。",-1),F=n("p",null,[s("当“这一小段时间”足够短时，用户是无感知的。如果请求时间超过一个范围，再显示"),n("code",null,"loading"),s("的效果。")],-1),W=n("p",null,[s("试想如果我们一点击“Siri与搜索”就显示"),n("code",null,"loading"),s("效果，即使数据请求时间很短，"),n("code",null,"loading"),s("效果一闪而过。用户也是可以感知到的。")],-1),G=n("code",null,"React",-1),T={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-suspense.html",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"hook",-1),Y={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-reference.html#usedeferredvalue",target:"_blank",rel:"noopener noreferrer"},Z=o('<p>而在源码内部，为了支持这些特性，同样需要将<strong>同步的更新</strong>变为<strong>可中断的异步更新</strong>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过以上内容，我们可以看到，<code>React</code>为了践行“构建<strong>快速响应</strong>的大型 Web 应用程序”理念做出的努力。</p><p>其中的关键是解决CPU的瓶颈与IO的瓶颈。而落实到实现上，则需要将<strong>同步的更新</strong>变为<strong>可中断的异步更新</strong>。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',5),K={href:"https://www.bilibili.com/video/BV134411c7Sk?from=search&seid=17404881291635824595",target:"_blank",rel:"noopener noreferrer"};function Q(t,nn){const a=c("ExternalLinkIcon"),l=c("RouterLink");return r(),i("div",null,[h,k,_,n("p",null,[s("我们可以从"),n("a",g,[s("官网"),e(a)]),s("看到"),m,s("的理念：")]),v,n("img",{src:t.$withBase("/img/long-task.png"),alt:"长任务"},null,8,b),f,n("p",null,[s("答案是：在浏览器每一帧的时间中，预留一些时间给JS线程，"),S,s("利用这部分时间更新组件（可以看到，在"),n("a",R,[s("源码"),e(a)]),s("中，预留的初始时间是5ms）。")]),x,w,j,n("img",{src:t.$withBase("/img/time-slice.png"),alt:"长任务"},null,8,J),D,n("details",C,[I,B,n("p",null,[e(l,{to:"/views/Books/Front-end/JustReact/me.html"},{default:u(()=>[s("关注公众号")]),_:1}),s("，后台回复"),O,s("获得在线Demo地址")]),y]),E,U,n("p",null,[q,s("给出的答案是"),n("a",M,[s("将人机交互研究的结果整合到真实的 UI 中"),e(a)]),s("。")]),z,A,n("img",{src:t.$withBase("/img/legacy-move.gif"),alt:"同步"},null,8,V),L,n("img",{src:t.$withBase("/img/concurrent-mov.gif"),alt:"异步"},null,8,P),$,N,H,F,W,n("p",null,[s("为此，"),G,s("实现了"),n("a",T,[s("Suspense"),e(a)]),s("功能及配套的"),X,s("——"),n("a",Y,[s("useDeferredValue"),e(a)]),s("。")]),Z,n("p",null,[n("a",K,[s("「英文」尤雨溪论JavaScript框架设计哲学：平衡"),e(a)])])])}const en=p(d,[["render",Q],["__file","idea.html.vue"]]);export{en as default};
