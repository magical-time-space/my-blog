import{_ as p,X as o,Y as c,Z as s,$ as n,a0 as t,a4 as a,E as i}from"./framework-d8252107.js";const l={},u=a(`<h1 id="类型系统的行为" tabindex="-1"><a class="header-anchor" href="#类型系统的行为" aria-hidden="true">#</a> 类型系统的行为</h1><h2 id="什么是结构化类型" tabindex="-1"><a class="header-anchor" href="#什么是结构化类型" aria-hidden="true">#</a> 什么是结构化类型？</h2><p>TypeScript 使用<strong>结构化类型</strong>，这个系统并不同于你可能使用过的一些其他流行语言（如：Java、C# 等）的类型系统。</p><p>结构化类型系统背后的思想是如果他们的成员类型是兼容的，则他们是兼容的。例如：在 C# 或者 Java 中，有两个名为 <code>MyPoint</code> 和 <code>YourPoint</code> 的类，它们都具有公共 <code>int</code> 类型的属性 <code>x</code> 和 <code>y</code>，这两个类是不可互换的。但在结构化的类型系统中（TypeScript），这些类型具有不同名称的事实并不重要，因为它们具有相同类型的成员，所以它们是相同的（可以互换的）。</p><p>这也适用于子类型关系。例如：在 C++ 中，如果 <code>Animal</code> 是 <code>Dog</code> 的父类，你只能使用 <code>Dog</code> 来替代 <code>Animal</code>。在 TypeScript 中，并不是如此，具有至少与 <code>Animal</code> 相同数量的成员（适当的类型）的 <code>Dog</code>，才是 <code>Animal</code> 的子类型，而不管是否是继承关系。</p><p>这对于习惯于使用名义类型语言的程序员来说，会产生一些令人惊讶的结果。在这个 FAQs 中的许多问题，都可以追溯到结构化类型及其含义。一旦你掌握了它的基础知识，就很容易理解了。</p><h2 id="什么是类型删除" tabindex="-1"><a class="header-anchor" href="#什么是类型删除" aria-hidden="true">#</a> 什么是类型删除？</h2><p>TypeScript 移除了类型断言、接口、类型别名和一些其他编译期间的类型结构。</p><p>输入：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> x<span class="token operator">:</span> SomeInterface<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这意味着，在运行时，没有信息表明变量 <code>x</code> 的类型是 <code>SomeInterface</code>。</p><p>对于习惯使用反射或其他元数据系统的程序员来说，缺少的运行时类型信息可能是令人惊讶的。FAQs 中的许多问题都可以归结为「因为类型被删除」。</p><h2 id="为什么没有-setter-时的-getter-没有被认为是只读" tabindex="-1"><a class="header-anchor" href="#为什么没有-setter-时的-getter-没有被认为是只读" aria-hidden="true">#</a> 为什么没有 setter 时的 getter，没有被认为是只读？</h2><blockquote><p>我写下一段代码，并且期望它会抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected error here</span>
x<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),r={href:"https://github.com/Microsoft/TypeScript/issues/12",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="为什么函数参数是双向协变" tabindex="-1"><a class="header-anchor" href="#为什么函数参数是双向协变" aria-hidden="true">#</a> 为什么函数参数是双向协变？</h2><blockquote><p>我写下一段代码，并且期望它会抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">trainDog</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Dog<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">cloneAnimal</span><span class="token punctuation">(</span>source<span class="token operator">:</span> Animal<span class="token punctuation">,</span> <span class="token function-variable function">done</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Runtime error here occurs because we end up invoking &#39;trainDog&#39; with a &#39;Cat&#39;</span>
<span class="token function">cloneAnimal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> trainDog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是由于类型系统中缺乏显示协变/逆变注解而导致的不健全。由于它们的缺失，当被问及到 <code>(x: Dog) =&gt; void</code> 是否能够赋值给 <code>(x: Animal) =&gt; void</code> 时，TypeScript 必须更加的宽容处理。</p><p>为了理解为什么是这样，我们来思考两个问题：<code>Dog[]</code> 是 <code>Animal[]</code> 的子类型吗？在 TypeScript 中 <code>Dog[]</code> 是否应该是 <code>Animal[]</code> 的子类型？</p><p>第二个问题很容易分析，如果它的答案是 <code>no</code> 了？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">checkIfAnimalsAreAwake</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">let</span> myPets<span class="token operator">:</span> Dog<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>spot<span class="token punctuation">,</span> fido<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Error? Can&#39;t substitute Dog[] for Animal[] ?</span>
<span class="token function">checkIfAnimalsAreAwake</span><span class="token punctuation">(</span>myPets<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将是非常烦人。在 <code>checkIfAnimalsAreAwake</code> 没有修改 arr 的情况下，这段代码 100% 是正确的。没有充足的理由来认为 <code>Dog[]</code> 不能被赋值给 <code>Animal[]</code> - 在这里很明显，一组 <code>Dog</code> 是一组 <code>Animal</code>。</p><p>回到第一个问题，类型系统什么时候会决定 <code>Dog[]</code> 是 <code>Animal[]</code> 的子类型。它将会进行以下计算（写到这里，编译器好像没有进行任何优化）：</p><ul><li><code>Dog[]</code> 可以被赋值给 <code>Animal[]</code> 类型吗？</li><li><code>Dog[]</code> 的每个成员都可以被赋值给 <code>Animal[]</code> 吗？ <ul><li><code>Dog[].push</code> 可以赋值给 <code>Animal[].push</code> 吗？ <ul><li>类型 <code>(x: Dog) =&gt; number</code> 可以赋值给 <code>(x: Animal) =&gt; number</code> 吗？ <ul><li><code>(x: Dog) =&gt; number</code> 的第一个参数的类型，可以赋值给 <code>(x: Animal) =&gt; number</code> 的第一个参数吗？ <ul><li><code>Dog</code> 可以赋值给 <code>Animal</code> 吗？ <ul><li>是的</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>如你所看到的一样，类型系统在检查类型是否可以赋值时，它会提问「<code>(x: Dog) =&gt; number</code> 的类型能赋值给 <code>(x: Animal) =&gt; number</code> 吗？」，这与类型系统要求原始类型所需的问题相同。如果 TypeScript 强制函数参数进行逆变（<code>Animal</code> 可以赋值给 <code>Dog</code>），这可能会导致 <code>Dog[]</code> 并不能赋值给 <code>Animal[]</code>。</p><p>总的来说，在 TypeScript 的类型系统里，一个接收更多特定类型参数的函数是否能够赋值给一个较少特定类型参数的函数的问题，它的答案有一个先决条件 - 有更多特定类型的数组能够赋值到一个较少特定类型的数组吗？在大多数情况下，如果后者不是这情情况，则认为是不被允许的。所以我们必须对函数参数类型的特定情况进行正确的权衡。</p><h2 id="为什么有更少参数的函数能够赋值给具有更多参数的函数" tabindex="-1"><a class="header-anchor" href="#为什么有更少参数的函数能够赋值给具有更多参数的函数" aria-hidden="true">#</a> 为什么有更少参数的函数能够赋值给具有更多参数的函数？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ....</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Expected error because &#39;doSomething&#39; wants a callback of</span>
<span class="token comment">// 2 parameters, but &#39;handler&#39; only accepts 1</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是预期和期望的行为。首先，参考在顶部 FAQ 中的 「substitutability」（译者注：「substitutability」会在接下来的术语专题中解释） - <code>handler</code> 是回调函数中的有效参数，因为它可以安全的忽略额外的参数。</p><p>其次，让我们来探讨下另外一个用例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>arg <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这也可以看成一个「期望的错误」。在运行时，<code>forEach</code> 使用三个参数调用指定的回调函数，但是在大多数情况下，回调函数仅仅使用一个或者两个参数。这是一种非常常见的 JavaScript 模式，必须明确声明所有未使用的参数是很麻烦的。</p><blockquote><p>但是 <code>forEach</code> 仅仅是标记它的参数作为可选项，例如：<code>forEach(callback: (element?: T, index?: number, array?: T[]))</code></p></blockquote><p>这并不是可选回调函数的含义。始终从函数调用者的角度去读取函数签名，如果 <code>forEach</code> 声明回调函数是可选的，这意味着 <code>forEach</code> 可能会使用 0 参数来调用回调函数。</p><p>一个可选的回调函数参数的含义是：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Invoke the provided function with 0 or 1 argument</span>
<span class="token keyword">function</span> <span class="token function">maybeCallWithArg</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>forEach</code> 总是为其回调函数提供所有的三个参数。你不必检查 <code>index</code> 参数是否为 undefined - 它始终存在，并不是可选的。</p><p>目前在 TypeScript 没有存在一种方法可以指示回调函数的参数必须存在。注意，这种强制执行，并不会修复一个错误。换句话说，我们假设每一个回调函数中必须至少有一个参数，你可能会写下以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;just counting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//   ~~ Error, not enough arguments?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过添加一个参数来修复它，但是它可能不是很正确</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;just counting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OK, but doesn&#39;t do anything different at all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么一个返回值不是-void-的函数-可以赋值给一个返回值为-void-的函数" tabindex="-1"><a class="header-anchor" href="#为什么一个返回值不是-void-的函数-可以赋值给一个返回值为-void-的函数" aria-hidden="true">#</a> 为什么一个返回值不是 <code>void</code> 的函数，可以赋值给一个返回值为 <code>void</code> 的函数？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">callMeMaybe</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Expected an error because &#39;doSomething&#39; returns number, but &#39;callMeMaybe&#39;</span>
<span class="token comment">// expects void-returning function</span>
<span class="token function">callMeMaybe</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是预期和期望的行为。首先，参考在顶部的 FAQ 中的 「substitutability」- 相比于 <code>callMeMaybe</code>, <code>doSomething</code> 返回「更多」的信息，<code>callMeMaybe</code> 是一个有效的替代品。</p><p>其次，让我们来探讨下另外一个用例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">callMeMaybe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这也可以看成是一个「期望的错误」。 <code>Array#push</code> 会返回一个数字（数组的新长度），但是它使用在一个返回值为 <code>void</code> 的函数上，它是一个安全的替代品。</p><p>另外一种思考这个问题的方式是：一个返回值类型为 <code>void</code> 的函数，它会说：“无论你的返回值是否存在，我都不会检查它”。</p><h2 id="为什么所有的类型-都能赋值给一个空的接口" tabindex="-1"><a class="header-anchor" href="#为什么所有的类型-都能赋值给一个空的接口" aria-hidden="true">#</a> 为什么所有的类型，都能赋值给一个空的接口？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Thing</span> <span class="token punctuation">{</span>
  <span class="token comment">/* nothing here */</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Thing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// mysterious implementation here</span>
<span class="token punctuation">}</span>
<span class="token comment">// Expected some or all of these to be errors</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token string">&#39;huh?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有成员的类型，能够被任何类型替代。在这个例子中，<code>window</code>、<code>42</code>、<code>huh</code> 都能取代 <code>Thing</code>。</p><p>通常来说，你永远不应该声明没有属性的 <code>interface</code>。</p><h2 id="我可以用名义上的类型别名吗" tabindex="-1"><a class="header-anchor" href="#我可以用名义上的类型别名吗" aria-hidden="true">#</a> 我可以用名义上的类型别名吗？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">SomeUrl</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">FirstName</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token operator">:</span> SomeUrl <span class="token operator">=</span> <span class="token string">&#39;http://www.typescriptlang.org/&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y<span class="token operator">:</span> FirstName <span class="token operator">=</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// Expected error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型别名只是一个简单的别名，它们无法区分自己所表示的类型。</p><p>这有一个涉及到使用交叉类型的解决办法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Strings here are arbitrary, but must be distinct</span>
<span class="token keyword">type</span> <span class="token class-name">SomeUrl</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;this is a url&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">FirstName</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;person name&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Add type assertions</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token operator">&lt;</span>SomeUrl<span class="token operator">&gt;</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&lt;</span>FirstName<span class="token operator">&gt;</span><span class="token string">&#39;bob&#39;</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// Error</span>

<span class="token comment">// OK</span>
<span class="token keyword">let</span> xs<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">let</span> ys<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>
xs <span class="token operator">=</span> ys<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你需要在创建值的任何位置添加类型断言，但是它仍然可以使用 <code>string</code> 别名，并且会失去类型的安全性。</p><h2 id="如何防止两种类型在结构上兼容" tabindex="-1"><a class="header-anchor" href="#如何防止两种类型在结构上兼容" aria-hidden="true">#</a> 如何防止两种类型在结构上兼容？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ScreenCoordinate</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">PrintCoordinate</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">sendToPrinter</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> PrintCoordinate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ScreenCoordinate <span class="token punctuation">{</span>
  <span class="token comment">// Not a real implementation</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// This should be an error</span>
<span class="token function">sendToPrinter</span><span class="token punctuation">(</span><span class="token function">getCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你真的希望两种类型不兼容，有一种方式添加一个 「brand」 成员：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ScreenCoordinate</span> <span class="token punctuation">{</span>
  _screenCoordBrand<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">PrintCoordinate</span> <span class="token punctuation">{</span>
  _printCoordBrand<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Error</span>
<span class="token function">sendToPrinter</span><span class="token punctuation">(</span><span class="token function">getCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\b 请注意，这将需要在创建「brand」的地方使用类型断言：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getCursorPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ScreenCoordinate <span class="token punctuation">{</span>
  <span class="token comment">// Not a real implementation</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ScreenCoordinate<span class="token operator">&gt;</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),k={href:"https://github.com/Microsoft/TypeScript/issues/202",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="如果对象实现了某个接口-我怎么在运行时检查" tabindex="-1"><a class="header-anchor" href="#如果对象实现了某个接口-我怎么在运行时检查" aria-hidden="true">#</a> 如果对象实现了某个接口，我怎么在运行时检查？</h2><blockquote><p>我写下了像下面的一段代码</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SomeInterface</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">SomeOtherInterface</span> <span class="token punctuation">{</span>
  questions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span> SomeInterface <span class="token operator">|</span> SomeOtherInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Can&#39;t use instanceof on interface, help?</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">SomeInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编译时期， TypeScript 的类型被删除。这意味着没有用于执行运行时类型检查的内置机制。这完全取决与你如何鉴别对象。一个比较广泛的用法是检查某个对象里的属性。你可以使用用户定义的类型保护来实现它：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isSomeInterface</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> SomeInterface <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span> SomeInterface<span class="token operator">|</span>SomeOtherInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSomeInterface</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cool!</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么错误的转化不会引起运行时的错误" tabindex="-1"><a class="header-anchor" href="#为什么错误的转化不会引起运行时的错误" aria-hidden="true">#</a> 为什么错误的转化不会引起运行时的错误？</h2><blockquote><p>我写下一些代码：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>x<span class="token punctuation">;</span> <span class="token comment">// Expected: runtime error (can&#39;t convert boolean to string)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者是这样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;hmm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span> <span class="token comment">// expected b === null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 拥有类型断言，但这并不是一个「casts」：<code>&lt;T&gt; x</code> 仅仅是用来告诉 TypeScript：「TypeScript，请将 <code>x</code> 的类型认为是 <code>T</code>」，而不是执行类型安全的运行时转换。因为类型被删除，没有直接等价于 C# 的 <code>expr as</code> 或者是 <code>(type)expr</code> 的语法。</p><h2 id="为什么我没有为-number-string-或者-t-t-进行类型检查" tabindex="-1"><a class="header-anchor" href="#为什么我没有为-number-string-或者-t-t-进行类型检查" aria-hidden="true">#</a> 为什么我没有为 <code>(number) =&gt; string</code> 或者 <code>(T) =&gt; T</code> 进行类型检查？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">myFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">string</span> <span class="token operator">=</span> n <span class="token operator">=&gt;</span> <span class="token string">&#39;The number in hex is &#39;</span> <span class="token operator">+</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected error because boolean is not number</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数的类型中，参数名字是必须的。上面那段代码描述了一个参数名是 <code>number</code>，类型是 <code>any</code> 的函数。换句话说，这个声明：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">myFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它等价于这个：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">myFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你应该写成：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">myFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span>myArgName<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了避免这些问题，你需要开启 <code>noImplicitAny</code> 选项，当检测到有任何参数的类型为 <code>any</code> 时，它将会发出一个警告。</p><h2 id="为什么我会得到-supplied-parameters-do-not-match-any-signature-的错误" tabindex="-1"><a class="header-anchor" href="#为什么我会得到-supplied-parameters-do-not-match-any-signature-的错误" aria-hidden="true">#</a> 为什么我会得到 <code>Supplied parameters do not match any signature</code> 的错误？</h2><p>函数实现签名，它并不是重载的一部分：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">createLog</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLog</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createLog</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token function">createLog</span><span class="token punctuation">(</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERROR: Supplied parameters do not match any signature</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当至少具有一个函数重载的签名时，只有重载是可见的。最后一个声明签名（也可以被称为签名的实现）对签名的形状并没有贡献，因此，要获得所需的行为，你需要添加额外的重载：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">createLog</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLog</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createLog</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 JavaScript 没有函数重载，我们不得不这么做，因此你需要在你的函数中进行参数检查。</p><p>例如，你可以要求你的使用者使用匹配的参数对来调用，并正确实现它，而不允许混合参数类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// Just an implementation and not visible to callers</span>
<span class="token punctuation">}</span>

<span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function v(b,g){const e=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("这在 TypeScript 2.0 + 中会抛出错误。具体请看 "),s("a",r,[n("#12"),t(e)])]),d,s("p",null,[n("另外你也可以查看此 "),s("a",k,[n("#202"),t(e)]),n(" 来获取更多有关于此问题的信息；")]),m])}const h=p(l,[["render",v],["__file","type-system-behavior.html.vue"]]);export{h as default};
