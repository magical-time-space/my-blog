import{_ as n,X as s,Y as a,a4 as t}from"./framework-d8252107.js";const e={},o=t(`<h1 id="truthy" tabindex="-1"><a class="header-anchor" href="#truthy" aria-hidden="true">#</a> Truthy</h1><p>JavaScript 有一个 <code>truthy</code> 概念，即在某些场景下会被推断为 <code>true</code>，例如除 <code>0</code> 以外的任何数字：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将会被推断出 \`true\`</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Any number other than 0 is truthy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以用下表来做参考：</p><table><thead><tr><th><strong>Variable Type</strong></th><th><strong>When it is falsy</strong></th><th><strong>When it is truthy</strong></th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>true</td></tr><tr><td>string</td><td>&#39; &#39; (empty string)</td><td>any other string</td></tr><tr><td>number</td><td>0 NaN</td><td>any other number</td></tr><tr><td>null</td><td>always</td><td>never</td></tr><tr><td>Any other Object including empty ones like {},[]</td><td>never</td><td>always</td></tr></tbody></table><h2 id="明确的" tabindex="-1"><a class="header-anchor" href="#明确的" aria-hidden="true">#</a> 明确的</h2><p>通过操作符 <code>!!</code>，你可以很容易的将某些值转化为布尔类型的值，例如：<code>!!foo</code>，它使用了两次 <code>!</code>，第一个 <code>!</code> 用来将其（在这里是 <code>foo</code>）转换为布尔值，但是这一操作取得的是其取反后的值，第二个取反时，能得到真正的布尔值。</p><p>这在很多地方都可以看到：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Direct variables</span>
<span class="token keyword">const</span> hasName <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>name<span class="token punctuation">;</span>

<span class="token comment">// As members of objects</span>
<span class="token keyword">const</span> someObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  hasName<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>name
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ReactJS</span>
<span class="token punctuation">{</span>
  <span class="token operator">!</span><span class="token operator">!</span>someName <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>someName<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),p=[o];function c(r,d){return s(),a("div",null,p)}const l=n(e,[["render",c],["__file","truthy.html.vue"]]);export{l as default};
