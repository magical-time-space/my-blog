import{_ as p,X as i,Y as l,Z as s,$ as n,a0 as a,a5 as d,a4 as o,E as t}from"./framework-d8252107.js";const r={},u=o(`<h1 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h1><h2 id="为什么这些空类的行为很奇怪" tabindex="-1"><a class="header-anchor" href="#为什么这些空类的行为很奇怪" aria-hidden="true">#</a> 为什么这些空类的行为很奇怪？</h2><blockquote><p>我写下这段代码，并期望它抛出错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Empty</span> <span class="token punctuation">{</span>
  <span class="token comment">/* empty */</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> e2<span class="token operator">:</span> Empty <span class="token operator">=</span> window<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k=o(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
  important<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  properties<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Alpha</code> 和 <code>Bravo</code> 的结构相同，都是继承自 <code>Base</code>，这会产生许多令人惊讶的效果，所以别这么做。如果你想让 <code>Alpha</code> 与 <code>Bravo</code> 不相同，为它们各自提供一个属性。</p><h2 id="什么是名义上的类" tabindex="-1"><a class="header-anchor" href="#什么是名义上的类" aria-hidden="true">#</a> 什么是名义上的类</h2><p>这两段代码该如何解释：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Charlie</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Delta</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bravo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Charlie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// OK</span>
c <span class="token operator">=</span> d<span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 TypeScript 中，类进行结构上的比较，有一个例外是对于 <code>private</code> 与 <code>protected</code> 的成员。当一个成员是 <code>private</code> 或者 <code>protected</code> 时，它们必须来自同一个声明，才能被视为与另一个 <code>private</code> 或者 <code>protected</code> 的成员相同。</p><h2 id="为什么在我的实例方法中-this-成了一个「孤儿」" tabindex="-1"><a class="header-anchor" href="#为什么在我的实例方法中-this-成了一个「孤儿」" aria-hidden="true">#</a> 为什么在我的实例方法中，<code>this</code> 成了一个「孤儿」？</h2><blockquote><p>我写下如下代码</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token function">someCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints &#39;undefined&#39;, not 10</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Throws error &quot;this.method is not a function&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>someCallback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能会提出一些相似的问题：</p><ul><li>为什么在我的回调函数中类的属性没有定义？</li><li>为什么在我的回调函数中，<code>this</code> 指向 <code>window</code>？</li><li>为什么在我的回调函数中，<code>this</code> 指向 <code>undefined</code>？</li><li>为什么我会得到 <code>this.someMethod is not a function</code> 的错误？</li><li>为什么我会得到 <code>Cannot read property &#39;someMethod&#39; of undefined</code> 的错误？</li></ul><p>在 JavaScript 中，<code>this</code> 值由以下确定：</p><ol><li><p>该函数是调用 <code>.bind</code> 的结果吗？如果是这样，<code>this</code> 由传递给 <code>bind</code> 的第一个参数确定</p></li><li><p>该函数是通过属性表达式 <code>expr.method() ?</code> 直接调用吗？如果是这样，<code>this</code> 指向 <code>expr</code></p></li><li><p>否则，<code>this</code> 是 <code>undefined</code>（在严格模式中），或者是 <code>window</code> （非严格模式中）。</p></li></ol><p>在上一个例子中，影响结果的是这行代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>someCallback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们提供了 <code>obj.someCallback</code> 到 <code>setTimeout</code> 的函数引用，然后该函数并不是作为 <code>bind</code> 的结果调用，也不是直接作为一个方法调用。因此在 <code>someCallback</code> 里的 <code>this</code> 指向 <code>window</code>（或者在严格模式下的 <code>undefied</code>）。</p>`,16),v={href:"http://stackoverflow.com/a/20627988/1704166",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别" tabindex="-1"><a class="header-anchor" href="#当-bar-是一个-class-时-bar-和-typeof-bar-有什么区别" aria-hidden="true">#</a> 当 <code>Bar</code> 是一个 <code>class</code> 时，<code>Bar</code> 和 <code>typeof Bar</code> 有什么区别？</h2><blockquote><p>我写下这段代码，但是我不理解我为什么会得到错误：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> x<span class="token operator">:</span> MyClass<span class="token punctuation">;</span>
<span class="token comment">// Cannot assign &#39;typeof MyClass&#39; to MyClass? Huh?</span>
x <span class="token operator">=</span> MyClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，类仅仅是个函数，这点很重要。我们将类对象本身 -- <code>MyClass</code> 的值，作为是构造函数。当一个构造函数被 <code>new</code> 调用时，我们得到一个对象，它是该类的实例。</p><p>因此，当我们定义一个类时，实际上，我们定义了两个不同的类型。</p><p>第一个是由类的名字推导而来，在这个例子中是 <code>MyClass</code>。这个是类实例的类型，它定义了类的实例具有的属性和方法，它是一个通过调用类的构造函数来返回的类型。</p><p>第二个类型是一个匿名的类型，它是构造函数具有的类型。它包含一个返回类实例的构造函数签名（可以使用 <code>new</code> 调用），同时，它也包含类中可能含有的 <code>static</code> 属性和方法。它也通常被称为「静态方面」，因为它包含那些静态成员（以及作为类的构造函数）。我们可以用 <code>typeof</code> 来引用此类型。</p><p>当在类型位置使用 <code>typeof</code> 操作符时，描述了表达式的类型。因此 <code>typeof MyClass</code> 是指 <code>MyClass</code> 的类型。</p><h2 id="为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值" tabindex="-1"><a class="header-anchor" href="#为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值" aria-hidden="true">#</a> 为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？</h2>`,9),b={href:"https://github.com/Microsoft/TypeScript/issues/1617",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"声明类和接口有什么区别",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#声明类和接口有什么区别","aria-hidden":"true"},"#"),n(" 声明类和接口有什么区别？")],-1),y={href:"http://stackoverflow.com/a/14348084/1704166",target:"_blank",rel:"noopener noreferrer"},f=o(`<h2 id="接口继承类-意味着什么" tabindex="-1"><a class="header-anchor" href="#接口继承类-意味着什么" aria-hidden="true">#</a> 接口继承类，意味着什么？</h2><blockquote><p>这段代码是什么意思？</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这创建了一个名叫 <code>Bar</code> 的类型，它与 <code>Foo</code> 的实例具有相同的成员。当 <code>Foo</code> 具有私有成员时，<code>Bar</code> 内的相同属性，必须由一个继承自 <code>Foo</code> 的类实现。总的来说，这种模式是应当避免的，尤其是在 <code>Foo</code> 有私有成员时。</p><h2 id="为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends" tabindex="-1"><a class="header-anchor" href="#为什么我会得到错误-typeerror-base-class-name-is-not-defined-in-extends" aria-hidden="true">#</a> 为什么我会得到错误：<code>TypeError: [base class name] is not defined in __extends</code>？</h2><blockquote><p>我写下一段代码，</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/** file1.ts **/</span>
<span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** file2.ts **/</span>
<span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行时，有如下错误发生在 <code>_extends</code> 中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Uncaught TypeError<span class="token operator">:</span> Alpha <span class="token keyword">is</span> not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最常见的原因是在你的 HTML 中包含有 file2.ts 的 <code>script</code>，但是并没有包含 <code>file1.ts</code> 的 <code>script</code>。因此你需要在引用 <code>file2.ts</code> 之前引用 <code>file1.ts</code>。</p><h2 id="为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误" tabindex="-1"><a class="header-anchor" href="#为什么我会得到-typeerror-cannot-read-property-prototype-of-undefined-in-extends-的错误" aria-hidden="true">#</a> 为什么我会得到 <code>TypeError: Cannot read property &#39;prototype&#39; of undefined&quot; in __extends</code> 的错误？</h2><blockquote><p>我写下如下代码：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/** file1.ts **/</span>
<span class="token keyword">class</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** file2.ts **/</span>
<span class="token keyword">class</span> <span class="token class-name">Bravo</span> <span class="token keyword">extends</span> <span class="token class-name">Alpha</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行时，有如下错误发生在 <code>_extends</code> 中：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Uncaught TypeError<span class="token operator">:</span> Cannot read property <span class="token string">&#39;prototype&#39;</span> <span class="token keyword">of</span> <span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现这种情况，原因可能有一些。</p><p>首先，在单个文件中，你在基类之前定义了派生类，那么你应该重新排序文件，以便在派生类之前声明基类。</p><p>如果你使用了 <code>--out</code> 的编译选项，编译器可能会对你希望文件的顺序感到困惑。请参阅常见问题简答中「如果控制文件排序」部分</p><p>如果您没有使用 <code>--out</code>，HTML 文件中的 <code>script</code> 引用文件的顺序可能出现错误。重新排序 <code>script</code> 对文件的引用，以便在定义派生类的文件之前包含定义基类的文件。</p><p>最后，如果你使用某种类型的第三方包，该包可能会错误地排序了文件。请参阅该工具的文档以了解如何在结果输出中正确排序输入文件。</p><h2 id="为什么不扩展-error、array、map-内置函数" tabindex="-1"><a class="header-anchor" href="#为什么不扩展-error、array、map-内置函数" aria-hidden="true">#</a> 为什么不扩展 <code>Error</code>、<code>Array</code>、<code>Map</code> 内置函数？</h2><p>在 ES2015 中，返回一个对象的构造函数将 <code>this</code> 的值隐式替换为 <code>super(...)</code> 的任何调用者。这对于构造函数代码捕获 <code>super(...)</code> 的任何潜在返回值并将其替换为 <code>this</code> 是必要的。</p><p>这样导致的结果是：<code>Error</code>、<code>Array</code> 等子类将不再按预期工作。这是由于 <code>Error</code>、<code>Array</code> 等的构造函数使用 ECMAScript6 中的 <code>new.target</code> 来调整原型链。但是，在 ECMAScript 5 中调用构造函数时，无法确保 <code>new.target</code> 的值。在其他一些低水平的编译器通常都有相同的限制。</p><h3 id="例如" tabindex="-1"><a class="header-anchor" href="#例如" aria-hidden="true">#</a> 例如：</h3><p>如下作为一个子类：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">FooError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会发现：</p><ul><li>通过这些子类的构造函数返回的对象中，方法可能是 <code>undefined</code>。因此，当调用 <code>sayHello</code> 时，会抛出一个错误。</li><li><code>instanceof</code> 将会在子类的实例和自身实例中被中断。因此 <code>new FooError() instanceof FooError</code> 将返回 <code>false</code>。</li></ul><h3 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐" aria-hidden="true">#</a> 推荐</h3><p>作为一个推荐方式，你可以在 <code>super(...)</code> 被调用之后手动调整原型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">FooError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Set the prototype explicitly.</span>
    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> FooError<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，任何 <code>FooError</code> 的子类将不得不手动设置原型。在运行时，对于那些不支持 <code>Object.setPrototypeOf</code> 属性的，你可能用要 <code>__proto__</code> 来替代他。</p>`,32),w={href:"https://docs.microsoft.com/zh-cn/microsoft-edge/dev-guide/whats-new/javascript-version-information",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"FooError.prototype",-1),x=s("code",null,"this",-1);function _(E,B){const c=t("RouterLink"),e=t("ExternalLinkIcon");return i(),l("div",null,[u,s("p",null,[n("请参阅此问题「"),a(c,{to:"/views/Books/Front-end/TypescriptMaster/faqs/type-system-behavior.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%89%80%E6%9C%89%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%83%BD%E8%83%BD%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%80%E4%B8%AA%E7%A9%BA%E7%9A%84%E6%8E%A5%E5%8F%A3%EF%BC%9F"},{default:d(()=>[n("为什么所有的内容都能赋值给空的接口")]),_:1}),n("」。值得重新思考一下这个答案的建议：一般来说，你永远不应该声明一个没有属性的类。即使对于子类也是如此：")]),k,s("p",null,[n("这里概述了一些解决办法："),s("a",v,[n("http://stackoverflow.com/a/20627988/1704166"),a(e)])]),m,s("p",null,[n("有关此问题，和其他初始化顺序问题，请参阅 "),s("a",b,[n("#1617"),a(e)]),n("。")]),h,s("p",null,[n("参阅: "),s("a",y,[n("http://stackoverflow.com/a/14348084/1704166"),a(e)])]),f,s("p",null,[n("不幸的是，"),s("a",w,[n("IE 10 及其一下不兼容这些方法"),a(e)]),n("。你可以手动将原型中的方法复制到实例本身，(例如："),g,n(" 复制到 "),x,n(" 上)，但是对于原型链本身是无法修复的。")])])}const A=p(r,[["render",_],["__file","class.html.vue"]]);export{A as default};
