const e=JSON.parse('{"key":"v-deb20d8e","path":"/views/Books/Front-end/TypescriptMaster/project/declarationspaces.html","title":"声明空间","lang":"zh-CN","frontmatter":{"description":"声明空间 在 TypeScript 里存在两种声明空间：类型声明空间与变量声明空间。下文将分别讨论这两个概念。 类型声明空间 类型声明空间包含用来当做类型注解的内容，例如下面的类型声明： class Foo {} interface Bar {} type Bas = {};","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/project/declarationspaces.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"声明空间"}],["meta",{"property":"og:description","content":"声明空间 在 TypeScript 里存在两种声明空间：类型声明空间与变量声明空间。下文将分别讨论这两个概念。 类型声明空间 类型声明空间包含用来当做类型注解的内容，例如下面的类型声明： class Foo {} interface Bar {} type Bas = {};"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"声明空间\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"类型声明空间","slug":"类型声明空间","link":"#类型声明空间","children":[]},{"level":2,"title":"变量声明空间","slug":"变量声明空间","link":"#变量声明空间","children":[]}],"git":{},"readingTime":{"minutes":1.33,"words":400},"filePathRelative":"views/Books/Front-end/TypescriptMaster/project/declarationspaces.md","excerpt":"<h1> 声明空间</h1>\\n<p>在 TypeScript 里存在两种声明空间：类型声明空间与变量声明空间。下文将分别讨论这两个概念。</p>\\n<h2> 类型声明空间</h2>\\n<p>类型声明空间包含用来当做类型注解的内容，例如下面的类型声明：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Bar</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">Bas</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
