import{_ as u,X as l,Y as i,Z as s,$ as n,a0 as a,a5 as p,a4 as e,E as c}from"./framework-d8252107.js";const r={},d=s("code",null,"useEffect",-1),k=e('<p>其中我们谈到</p><blockquote><p>在<code>flushPassiveEffects</code>方法内部会从全局变量<code>rootWithPendingPassiveEffects</code>获取<code>effectList</code>。</p></blockquote><p>本节我们深入<code>flushPassiveEffects</code>方法内部探索<code>useEffect</code>的工作原理。</p><h2 id="flushpassiveeffectsimpl" tabindex="-1"><a class="header-anchor" href="#flushpassiveeffectsimpl" aria-hidden="true">#</a> flushPassiveEffectsImpl</h2><p><code>flushPassiveEffects</code>内部会设置<code>优先级</code>，并执行<code>flushPassiveEffectsImpl</code>。</p>',5),f={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2458",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"flushPassiveEffects",-1),m=e("<p><code>flushPassiveEffectsImpl</code>主要做三件事：</p><ul><li><p>调用该<code>useEffect</code>在上一次<code>render</code>时的销毁函数</p></li><li><p>调用该<code>useEffect</code>在本次<code>render</code>时的回调函数</p></li><li><p>如果存在同步任务，不需要等待下次<code>事件循环</code>的<code>宏任务</code>，提前执行他</p></li></ul><p>本节我们关注前两步。</p>",3),b=s("code",null,"v16",-1),h={href:"https://zh-hans.reactjs.org/blog/2020/08/10/react-v17-rc.html#effect-cleanup-timing",target:"_blank",rel:"noopener noreferrer"},E=e(`<blockquote><p>副作用清理函数（如果存在）在 React 16 中同步运行。我们发现，对于大型应用程序来说，这不是理想选择，因为同步会减缓屏幕的过渡（例如，切换标签）。</p></blockquote><p>基于这个原因，在<code>v17.0.0</code>中，<code>useEffect</code>的两个阶段会在页面渲染后（<code>layout</code>阶段后）异步执行。</p><blockquote><p>事实上，从代码中看，<code>v16.13.1</code>中已经是异步执行了</p></blockquote><p>接下来我们详细讲解这两个步骤。</p><h2 id="阶段一-销毁函数的执行" tabindex="-1"><a class="header-anchor" href="#阶段一-销毁函数的执行" aria-hidden="true">#</a> 阶段一：销毁函数的执行</h2><p><code>useEffect</code>的执行需要保证所有组件<code>useEffect</code>的<code>销毁函数</code>必须都执行完后才能执行任意一个组件的<code>useEffect</code>的<code>回调函数</code>。</p><p>这是因为多个<code>组件</code>间可能共用同一个<code>ref</code>。</p><p>如果不是按照“全部销毁”再“全部执行”的顺序，那么在某个组件<code>useEffect</code>的<code>销毁函数</code>中修改的<code>ref.current</code>可能影响另一个组件<code>useEffect</code>的<code>回调函数</code>中的同一个<code>ref</code>的<code>current</code>属性。</p><p>在<code>useLayoutEffect</code>中也有同样的问题，所以他们都遵循“全部销毁”再“全部执行”的顺序。</p><p>在阶段一，会遍历并执行所有<code>useEffect</code>的<code>销毁函数</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pendingPassiveHookEffectsUnmount中保存了所有需要执行销毁的useEffect</span>
<span class="token keyword">const</span> unmountEffects <span class="token operator">=</span> pendingPassiveHookEffectsUnmount<span class="token punctuation">;</span>
  pendingPassiveHookEffectsUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> unmountEffects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unmountEffects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> HookEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unmountEffects<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> destroy <span class="token operator">=</span> effect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>
    effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 销毁函数存在则执行</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>pendingPassiveHookEffectsUnmount</code>数组的索引<code>i</code>保存需要销毁的<code>effect</code>，<code>i+1</code>保存该<code>effect</code>对应的<code>fiber</code>。</p><p>向<code>pendingPassiveHookEffectsUnmount</code>数组内<code>push</code>数据的操作发生在<code>layout阶段</code> <code>commitLayoutEffectOnFiber</code>方法内部的<code>schedulePassiveEffects</code>方法中。</p>`,13),y=s("code",null,"commitLayoutEffectOnFiber",-1),_=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">schedulePassiveEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">updateQueue</span><span class="token operator">:</span> FunctionComponentUpdateQueue <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>updateQueue<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> lastEffect <span class="token operator">=</span> updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> updateQueue<span class="token punctuation">.</span>lastEffect <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> firstEffect <span class="token operator">=</span> lastEffect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">let</span> effect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>next<span class="token punctuation">,</span> tag<span class="token punctuation">}</span> <span class="token operator">=</span> effect<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>tag <span class="token operator">&amp;</span> HookPassive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoHookEffect <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>tag <span class="token operator">&amp;</span> HookHasEffect<span class="token punctuation">)</span> <span class="token operator">!==</span> NoHookEffect
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 向\`pendingPassiveHookEffectsUnmount\`数组内\`push\`要销毁的effect</span>
        <span class="token function">enqueuePendingPassiveHookEffectUnmount</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向\`pendingPassiveHookEffectsMount\`数组内\`push\`要执行回调的effect</span>
        <span class="token function">enqueuePendingPassiveHookEffectMount</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      effect <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> firstEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="阶段二-回调函数的执行" tabindex="-1"><a class="header-anchor" href="#阶段二-回调函数的执行" aria-hidden="true">#</a> 阶段二：回调函数的执行</h2><p>与阶段一类似，同样遍历数组，执行对应<code>effect</code>的<code>回调函数</code>。</p><p>其中向<code>pendingPassiveHookEffectsMount</code>中<code>push</code>数据的操作同样发生在<code>schedulePassiveEffects</code>中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pendingPassiveHookEffectsMount中保存了所有需要执行回调的useEffect</span>
<span class="token keyword">const</span> mountEffects <span class="token operator">=</span> pendingPassiveHookEffectsMount<span class="token punctuation">;</span>
pendingPassiveHookEffectsMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mountEffects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mountEffects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> HookEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mountEffects<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> create <span class="token operator">=</span> effect<span class="token punctuation">.</span>create<span class="token punctuation">;</span>
   effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function g(w,P){const t=c("RouterLink"),o=c("ExternalLinkIcon");return l(),i("div",null,[s("p",null,[n("在"),a(t,{to:"/views/Books/Front-end/JustReact/renderer/prepare.html"},{default:p(()=>[n("架构篇commit阶段流程概览")]),_:1}),n("我们讲解了"),d,n("的工作流程。")]),k,s("blockquote",null,[s("p",null,[n("你可以从"),s("a",f,[n("这里"),a(o)]),n("看到"),v,n("的代码")])]),m,s("p",null,[n("在"),b,n("中第一步是同步执行的，在"),s("a",h,[n("官方博客"),a(o)]),n("中提到：")]),E,s("blockquote",null,[s("p",null,[y,n("方法我们在"),a(t,{to:"/views/Books/Front-end/JustReact/renderer/layout.html#commitlayouteffectonfiber"},{default:p(()=>[n("Layout阶段")]),_:1}),n("已经介绍")])]),_])}const x=u(r,[["render",g],["__file","useeffect.html.vue"]]);export{x as default};
