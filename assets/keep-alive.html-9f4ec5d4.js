const n=JSON.parse(`{"key":"v-283dc49f","path":"/views/Books/Front-end/JustVue2/extend/keep-alive.html","title":"keep-alive","lang":"zh-CN","frontmatter":{"description":"keep-alive 在我们的平时开发工作中，经常为了组件的缓存优化而使用 &lt;keep-alive&gt; 组件，乐此不疲，但很少有人关注它的实现原理，下面就让我们来一探究竟。 内置组件 &lt;keep-alive&gt; 是 Vue 源码中实现的一个组件，也就是说 Vue 源码不仅实现了一套组件化的机制，也实现了一些内置组件，它的定义在 src/core/components/keep-alive.js 中： export default { name: 'keep-alive', abstract: true, props: { include: patternTypes, exclude: patternTypes, max: [String, Number] }, created () { this.cache = Object.create(null) this.keys = [] }, destroyed () { for (const key in this.cache) { pruneCacheEntry(this.cache, key, this.keys) } }, mounted () { this.$watch('include', val =&gt; { pruneCache(this, name =&gt; matches(val, name)) }) this.$watch('exclude', val =&gt; { pruneCache(this, name =&gt; !matches(val, name)) }) }, render () { const slot = this.$slots.default const vnode: VNode = getFirstComponentChild(slot) const componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions if (componentOptions) { // check pattern const name: ?string = getComponentName(componentOptions) const { include, exclude } = this if ( // not included (include &amp;&amp; (!name || !matches(include, name))) || // excluded (exclude &amp;&amp; name &amp;&amp; matches(exclude, name)) ) { return vnode } const { cache, keys } = this const key: ?string = vnode.key == null // same constructor may get registered as different local components // so cid alone is not enough (#3269) ? componentOptions.Ctor.cid + (componentOptions.tag ? \`::\${componentOptions.tag}\` : '') : vnode.key if (cache[key]) { vnode.componentInstance = cache[key].componentInstance // make current key freshest remove(keys, key) keys.push(key) } else { cache[key] = vnode keys.push(key) // prune oldest entry if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode) } } vnode.data.keepAlive = true } return vnode || (slot &amp;&amp; slot[0]) } }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/extend/keep-alive.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"keep-alive"}],["meta",{"property":"og:description","content":"keep-alive 在我们的平时开发工作中，经常为了组件的缓存优化而使用 &lt;keep-alive&gt; 组件，乐此不疲，但很少有人关注它的实现原理，下面就让我们来一探究竟。 内置组件 &lt;keep-alive&gt; 是 Vue 源码中实现的一个组件，也就是说 Vue 源码不仅实现了一套组件化的机制，也实现了一些内置组件，它的定义在 src/core/components/keep-alive.js 中： export default { name: 'keep-alive', abstract: true, props: { include: patternTypes, exclude: patternTypes, max: [String, Number] }, created () { this.cache = Object.create(null) this.keys = [] }, destroyed () { for (const key in this.cache) { pruneCacheEntry(this.cache, key, this.keys) } }, mounted () { this.$watch('include', val =&gt; { pruneCache(this, name =&gt; matches(val, name)) }) this.$watch('exclude', val =&gt; { pruneCache(this, name =&gt; !matches(val, name)) }) }, render () { const slot = this.$slots.default const vnode: VNode = getFirstComponentChild(slot) const componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions if (componentOptions) { // check pattern const name: ?string = getComponentName(componentOptions) const { include, exclude } = this if ( // not included (include &amp;&amp; (!name || !matches(include, name))) || // excluded (exclude &amp;&amp; name &amp;&amp; matches(exclude, name)) ) { return vnode } const { cache, keys } = this const key: ?string = vnode.key == null // same constructor may get registered as different local components // so cid alone is not enough (#3269) ? componentOptions.Ctor.cid + (componentOptions.tag ? \`::\${componentOptions.tag}\` : '') : vnode.key if (cache[key]) { vnode.componentInstance = cache[key].componentInstance // make current key freshest remove(keys, key) keys.push(key) } else { cache[key] = vnode keys.push(key) // prune oldest entry if (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode) } } vnode.data.keepAlive = true } return vnode || (slot &amp;&amp; slot[0]) } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"keep-alive\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"内置组件","slug":"内置组件","link":"#内置组件","children":[]},{"level":2,"title":"组件渲染","slug":"组件渲染","link":"#组件渲染","children":[{"level":3,"title":"首次渲染","slug":"首次渲染","link":"#首次渲染","children":[]},{"level":3,"title":"缓存渲染","slug":"缓存渲染","link":"#缓存渲染","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":11.61,"words":3484},"filePathRelative":"views/Books/Front-end/JustVue2/extend/keep-alive.md","excerpt":"<h1> keep-alive</h1>\\n<p>在我们的平时开发工作中，经常为了组件的缓存优化而使用 <code>&lt;keep-alive&gt;</code> 组件，乐此不疲，但很少有人关注它的实现原理，下面就让我们来一探究竟。</p>\\n<h2> 内置组件</h2>\\n<p><code>&lt;keep-alive&gt;</code> 是 Vue 源码中实现的一个组件，也就是说 Vue 源码不仅实现了一套组件化的机制，也实现了一些内置组件，它的定义在 <code>src/core/components/keep-alive.js</code> 中：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'keep-alive'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">abstract</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token literal-property property\\">props</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">include</span><span class=\\"token operator\\">:</span> patternTypes<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">exclude</span><span class=\\"token operator\\">:</span> patternTypes<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">max</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>String<span class=\\"token punctuation\\">,</span> Number<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token function\\">created</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>cache <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>keys <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token function\\">destroyed</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> key <span class=\\"token keyword\\">in</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>cache<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">pruneCacheEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>cache<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>keys<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token function\\">mounted</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">$watch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'include'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">val</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">pruneCache</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">name</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">$watch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'exclude'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">val</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">pruneCache</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">name</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token operator\\">!</span><span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n  <span class=\\"token function\\">render</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> slot <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>$slots<span class=\\"token punctuation\\">.</span>default\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token literal-property property\\">vnode</span><span class=\\"token operator\\">:</span> VNode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getFirstComponentChild</span><span class=\\"token punctuation\\">(</span>slot<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token literal-property property\\">componentOptions</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">?</span>VNodeComponentOptions <span class=\\"token operator\\">=</span> vnode <span class=\\"token operator\\">&amp;&amp;</span> vnode<span class=\\"token punctuation\\">.</span>componentOptions\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>componentOptions<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// check pattern</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">?</span>string <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getComponentName</span><span class=\\"token punctuation\\">(</span>componentOptions<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> include<span class=\\"token punctuation\\">,</span> exclude <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token comment\\">// not included</span>\\n        <span class=\\"token punctuation\\">(</span>include <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>name <span class=\\"token operator\\">||</span> <span class=\\"token operator\\">!</span><span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>include<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span>\\n        <span class=\\"token comment\\">// excluded</span>\\n        <span class=\\"token punctuation\\">(</span>exclude <span class=\\"token operator\\">&amp;&amp;</span> name <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>exclude<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> vnode\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> cache<span class=\\"token punctuation\\">,</span> keys <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">?</span>string <span class=\\"token operator\\">=</span> vnode<span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span>\\n        <span class=\\"token comment\\">// same constructor may get registered as different local components</span>\\n        <span class=\\"token comment\\">// so cid alone is not enough (#3269)</span>\\n        <span class=\\"token operator\\">?</span> componentOptions<span class=\\"token punctuation\\">.</span>Ctor<span class=\\"token punctuation\\">.</span>cid <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>componentOptions<span class=\\"token punctuation\\">.</span>tag <span class=\\"token operator\\">?</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">::</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>componentOptions<span class=\\"token punctuation\\">.</span>tag<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">\`</span></span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token operator\\">:</span> vnode<span class=\\"token punctuation\\">.</span>key\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cache<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        vnode<span class=\\"token punctuation\\">.</span>componentInstance <span class=\\"token operator\\">=</span> cache<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>componentInstance\\n        <span class=\\"token comment\\">// make current key freshest</span>\\n        <span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>keys<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n        keys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        cache<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> vnode\\n        keys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\">// prune oldest entry</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>max <span class=\\"token operator\\">&amp;&amp;</span> keys<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>max<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token function\\">pruneCacheEntry</span><span class=\\"token punctuation\\">(</span>cache<span class=\\"token punctuation\\">,</span> keys<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> keys<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_vnode<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      vnode<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>keepAlive <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> vnode <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>slot <span class=\\"token operator\\">&amp;&amp;</span> slot<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
