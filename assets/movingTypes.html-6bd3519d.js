import{_ as o,X as p,Y as t,Z as n,$ as s,a0 as c,a5 as l,a4 as a,E as i}from"./framework-d8252107.js";const r={},d=a(`<h1 id="流动的类型" tabindex="-1"><a class="header-anchor" href="#流动的类型" aria-hidden="true">#</a> 流动的类型</h1><p>TypeScript 类型系统非常强大，它支持其他任何单一语言无法实现的类型流动和类型片段。</p><p>这是因为 TypeScript 的设计目的之一是让你无缝与像 JavaScript 这类高动态的语言一起工作。在这里，我们介绍一些在 TypeScript 中使用移动类型的技巧。</p><p>关键的动机：当你改变了其中一个时，其他相关的会自动更新，并且当有事情变糟糕时，你会得到一个友好的提示，就好像一个被精心设计过的约束系统。</p><h2 id="复制类型和值" tabindex="-1"><a class="header-anchor" href="#复制类型和值" aria-hidden="true">#</a> 复制类型和值</h2><p>如果你想移动一个类，你可能会想要做以下事情：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> Bar <span class="token operator">=</span> Foo<span class="token punctuation">;</span>

<span class="token keyword">let</span> bar<span class="token operator">:</span> Bar<span class="token punctuation">;</span> <span class="token comment">// Error: 不能找到名称 &#39;Bar&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会得到一个错误，因为 <code>const</code> 仅仅是复制了 <code>Foo</code> 到一个变量声明空间，因此你无法把 <code>Bar</code> 当作一个类型声明使用。正确的方式是使用 <code>import</code> 关键字，请注意，如果你在使用 <code>namespace</code> 或者 <code>modules</code>，使用 <code>import</code> 是你唯一能用的方式：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> importing <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> Bar <span class="token operator">=</span> importing<span class="token punctuation">.</span>Foo<span class="token punctuation">;</span>
<span class="token keyword">let</span> bar<span class="token operator">:</span> Bar<span class="token punctuation">;</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>import</code> 技巧，仅适合于类型和变量。</p><h2 id="捕获变量的类型" tabindex="-1"><a class="header-anchor" href="#捕获变量的类型" aria-hidden="true">#</a> 捕获变量的类型</h2><p>你可以通过 <code>typeof</code> 操作符在类型注解中使用变量。这允许你告诉编译器，一个变量的类型与其他类型相同，如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar<span class="token operator">:</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">;</span> <span class="token comment">// &#39;bar&#39; 类型与 &#39;foo&#39; 类型相同（在这里是： &#39;number&#39;）</span>

bar <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
bar <span class="token operator">=</span> <span class="token string">&#39;789&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error: &#39;string&#39; 不能分配给 &#39;number&#39; 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="捕获类成员的类型" tabindex="-1"><a class="header-anchor" href="#捕获类成员的类型" aria-hidden="true">#</a> 捕获类成员的类型</h2><p>与捕获变量的类型相似，你仅仅是需要声明一个变量用来捕获到的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 我们想要捕获的类型</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">let</span> _foo<span class="token operator">:</span> Foo<span class="token punctuation">;</span>

<span class="token comment">// 与之前做法相同</span>
<span class="token keyword">let</span> bar<span class="token operator">:</span> <span class="token keyword">typeof</span> _foo<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="捕获字符串类型" tabindex="-1"><a class="header-anchor" href="#捕获字符串类型" aria-hidden="true">#</a> 捕获字符串类型</h2><p>许多 JavaScript 库和框架都使用原始的 JavaScript 字符串，你可以使用 <code>const</code> 定义一个变量捕获它的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 捕获字符串的类型与值</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用一个捕获的类型</span>
<span class="token keyword">let</span> bar<span class="token operator">:</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">;</span>

<span class="token comment">// bar 仅能被赋值 &#39;Hello World&#39;</span>
bar <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
bar <span class="token operator">=</span> <span class="token string">&#39;anything else&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),u=n("code",null,"bar",-1),k=n("code",null,"Hello World",-1),m=a(`<h2 id="捕获键的名称" tabindex="-1"><a class="header-anchor" href="#捕获键的名称" aria-hidden="true">#</a> 捕获键的名称</h2><p><code>keyof</code> 操作符能让你捕获一个类型的键。例如，你可以使用它来捕获变量的键名称，在通过使用 <code>typeof</code> 来获取类型之后：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">{</span>
  red<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
  blue<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Colors</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> colors<span class="token punctuation">;</span>

<span class="token keyword">let</span> color<span class="token operator">:</span> Colors<span class="token punctuation">;</span> <span class="token comment">// color 的类型是 &#39;red&#39; | &#39;blue&#39;</span>
color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
color <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
color <span class="token operator">=</span> <span class="token string">&#39;anythingElse&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这允许你很容易地拥有像字符串枚举+常量这样的类型，如上例所示。</p>`,4);function v(b,y){const e=i("RouterLink");return p(),t("div",null,[d,n("p",null,[s("在这个例子里，"),u,s(" 有字面量类型 "),k,s("，我们在"),c(e,{to:"/views/Books/Front-end/TypescriptMaster/typings/literals.html"},{default:l(()=>[s("字面量类型")]),_:1}),s("章节已经深入讨论。")]),m])}const g=o(r,[["render",v],["__file","movingTypes.html.vue"]]);export{g as default};
