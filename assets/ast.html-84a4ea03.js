import{_ as e,X as o,Y as p,Z as s,$ as n,a0 as c,a5 as i,a4 as a,E as l}from"./framework-d8252107.js";const d={},u=a(`<h1 id="抽象语法树" tabindex="-1"><a class="header-anchor" href="#抽象语法树" aria-hidden="true">#</a> 抽象语法树</h1><h3 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点" aria-hidden="true">#</a> Node 节点</h3><p>节点是抽象语法树（AST） 的基本构造块。语法上，通常 <code>Node</code> 表示非末端（non-terminals）节点。但是，有些末端节点，如：标识符和字面量也会保留在树中。</p><p>AST 节点文档由两个关键部分构成。一是节点的 <code>SyntaxKind</code> 枚举，用于标识 AST 中的类型。二是其接口，即实例化 AST 时节点提供的 API。</p><p>这里是 <code>interface Node</code> 的一些关键成员：</p><ul><li><code>TextRange</code> 标识该节点在源文件中的起止位置。</li><li><code>parent?: Node</code> 当前节点（在 AST 中）的父节点</li></ul><p><code>Node</code> 还有一些其他的成员，标志（flags）和修饰符（modifiers）等。你可以在源码中搜索 <code>interface Node</code> 来查看，而上面提到对节点的遍历是非常重要的。</p><h3 id="sourcefile" tabindex="-1"><a class="header-anchor" href="#sourcefile" aria-hidden="true">#</a> SourceFile</h3><ul><li><code>SyntaxKind.SourceFile</code></li><li><code>interface SourceFile</code>.</li></ul><p>每个 <code>SourceFile</code> 都是一棵 AST 的顶级节点，它们包含在 <code>Program</code> 中。</p><h2 id="ast-技巧-访问子节点" tabindex="-1"><a class="header-anchor" href="#ast-技巧-访问子节点" aria-hidden="true">#</a> AST 技巧：访问子节点</h2><p>有个工具函数 <code>ts.forEachChild</code>，可以用来访问 AST 任一节点的所有子节点。</p><p>下面是简化的代码片段，用于演示如何工作：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forEachChild</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">,</span> <span class="token function-variable function">cbNode</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> cbNodeArray<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>BinaryExpression<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>operatorToken<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>BinaryExpression<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SyntaxKind<span class="token punctuation">.</span>IfStatement<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>thenStatement<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token function">visitNode</span><span class="token punctuation">(</span>cbNode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>IfStatement<span class="token operator">&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>elseStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// .... 更多</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数主要检查 <code>node.kind</code> 并据此判断 node 的接口，然后在其子节点上调用 <code>cbNode</code>。但是，要注意该函数不会为<em>所有</em>子节点调用 <code>visitNode</code>（例如：SyntaxKind.SemicolonToken）。想获得某 AST 节点的<em>所有</em>子节点，只要调用该节点的成员函数 <code>.getChildren</code>。</p><p>如下函数会打印 AST 节点详细信息：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printAllChildren</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ts<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ts<span class="token punctuation">.</span><span class="token function">syntaxKindToName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>pos<span class="token punctuation">,</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
  depth<span class="token operator">++</span><span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token function">printAllChildren</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们进一步讨论解析器时会看到该函数的使用示例。</p><h2 id="ast-技巧-syntaxkind-枚举" tabindex="-1"><a class="header-anchor" href="#ast-技巧-syntaxkind-枚举" aria-hidden="true">#</a> AST 技巧：SyntaxKind 枚举</h2><p><code>SyntaxKind</code> 被定义为一个常量枚举，如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> SyntaxKind <span class="token punctuation">{</span>
    Unknown<span class="token punctuation">,</span>
    EndOfFileToken<span class="token punctuation">,</span>
    SingleLineCommentTrivia<span class="token punctuation">,</span>
    <span class="token comment">// ... 更多</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),r=s("em",null,"内联",-1),k=s("code",null,"ts.SyntaxKind.EndOfFileToken",-1),m=s("code",null,"1",-1),v=s("em",null,"在运行时仍可用",-1),h=s("code",null,"ts.SyntaxKind.EndOfFileToken",-1),b=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">syntaxKindToName</span><span class="token punctuation">(</span>kind<span class="token operator">:</span> ts<span class="token punctuation">.</span>SyntaxKind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>ts<span class="token punctuation">)</span><span class="token punctuation">.</span>SyntaxKind<span class="token punctuation">[</span>kind<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ast-杂项" tabindex="-1"><a class="header-anchor" href="#ast-杂项" aria-hidden="true">#</a> AST 杂项</h2><p>杂项（Trivia）是指源文本中对正常理解代码不太重要的部分，例如：空白，注释，冲突标记。（为了保持轻量）杂项<em>不会存储</em>在 AST 中。但是可以<em>视需要</em>使用一些 <code>ts.*</code> API 来获取。</p><p>展示这些 API 前，你需要理解以下内容：</p><h3 id="杂项的所有权" tabindex="-1"><a class="header-anchor" href="#杂项的所有权" aria-hidden="true">#</a> 杂项的所有权</h3><p>通常：</p><ul><li>token 拥有它后面 <em>同一行</em> 到下一个 token 之前的所有杂项</li><li>该行之后的注释都与下个的 token 相关</li></ul><p>对于文件中的前导（leading）和结束（ending）注释：</p><ul><li>源文件中的第一个 token 拥有所有开始的杂项</li><li>而文件最后的一些列杂项则附加到文件结束符上，该 token 长度为 0</li></ul><h3 id="杂项-api" tabindex="-1"><a class="header-anchor" href="#杂项-api" aria-hidden="true">#</a> 杂项 API</h3><p>注释在多数基本使用中，都是让人关注的杂项。节点的注释可以通过以下函数获取：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>ts.getLeadingCommentRanges</code></td><td>给定源文本及其位置，返回给定位置后第一个换行符到 token 本身之间的注释范围（可能需要结合 <code>ts.Node.getFullStart</code> 使用）。</td></tr><tr><td><code>ts.getTrailingCommentRanges</code></td><td>给定源文本及其位置，返回给定位置后第一个换行符之前的注释范围（可能需要结合 <code>ts.Node.getEnd</code> 使用）。</td></tr></tbody></table><p>假设下面是某个源文件的一部分：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token comment">/*hello*/</span>
    <span class="token comment">//bye</span>
  <span class="token comment">/*hi*/</span>    <span class="token keyword">function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>function</code> 而言，<code>getLeadingCommentRanges</code> 仅返回最后的两个注释 <code>//bye</code> 和 <code>/*hi*/</code>。 另外，而在 <code>debugger</code> 语句结束位置调用 <code>getTrailingCommentRanges</code> 会得到注释 <code>/*hello*/</code>。</p><h3 id="token-start-和-full-start-位置" tabindex="-1"><a class="header-anchor" href="#token-start-和-full-start-位置" aria-hidden="true">#</a> Token Start 和 Full Start 位置</h3><p>节点有所谓的 &quot;token start&quot; 和 &quot;full start&quot; 位置。</p><ul><li>Token Start：比较自然的版本，即文件中一个 token 的文本开始的位置。</li><li>Full Start：是指扫描器从上一个重要 token 开始扫描的位置。</li></ul><p>AST 节点有 <code>getStart</code> 和 <code>getFullStart</code> API 用于获取以上两种位置，还是这个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token comment">/*hello*/</span>
    <span class="token comment">//bye</span>
  <span class="token comment">/*hi*/</span>    <span class="token keyword">function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>function</code> 而言，token start 即 <code>function</code> 的位置，而 <em>full</em> start 是 <code>/*hello*/</code> 的位置。要注意，full start 甚至会包含前一节点拥有的杂项。</p>`,21);function g(f,y){const t=l("RouterLink");return o(),p("div",null,[u,s("p",null,[n("这是个"),c(t,{to:"/views/Books/Front-end/TypescriptMaster/typings/enums.html#%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE"},{default:i(()=>[n("常量枚举")]),_:1}),n("，方便"),r,n("（例如："),k,n(" 会变为 "),m,n("），这样在使用 AST 时就不会有处理引用的额外开销。但编译时需要使用 --preserveConstEnums 编译标志，以便枚举"),v,n("。JavaScript 中你也可以根据需要使用 "),h,n("。另外，可以用以下函数，将枚举成员转化为可读的字符串：")]),b])}const x=e(d,[["render",g],["__file","ast.html.vue"]]);export{x as default};
