import{_ as p,X as i,Y as d,Z as n,$ as e,a0 as s,a5 as l,a4 as t,E as c}from"./framework-d8252107.js";const u={},k=n("p",null,[e("经过五章的学习，我们终于回到了"),n("code",null,"React"),e("应用的起点。")],-1),v=n("p",null,[e("这一节我们完整的走通"),n("code",null,"ReactDOM.render"),e("完成页面渲染的整个流程。")],-1),b=n("h2",{id:"创建fiber",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建fiber","aria-hidden":"true"},"#"),e(" 创建fiber")],-1),h=n("code",null,"ReactDOM.render",-1),m=n("code",null,"fiberRootNode",-1),_=n("code",null,"rootFiber",-1),f=n("code",null,"fiberRootNode",-1),g=n("code",null,"rootFiber",-1),y=n("code",null,"根节点",-1),R=t(`<p>这一步发生在调用<code>ReactDOM.render</code>后进入的<code>legacyRenderSubtreeIntoContainer</code>方法中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// container指ReactDOM.render的第二个参数（即应用挂载的DOM节点）</span>
root <span class="token operator">=</span> container<span class="token punctuation">.</span>_reactRootContainer <span class="token operator">=</span> <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>
  container<span class="token punctuation">,</span>
  forceHydrate<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
fiberRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-dom/src/client/ReactDOMLegacy.js#L193",target:"_blank",rel:"noopener noreferrer"},w=t(`<p><code>legacyCreateRootFromDOMContainer</code>方法内部会调用<code>createFiberRoot</code>方法完成<code>fiberRootNode</code>和<code>rootFiber</code>的创建以及关联。并初始化<code>updateQueue</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">containerInfo</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> RootTag<span class="token punctuation">,</span>
  <span class="token literal-property property">hydrate</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">hydrationCallbacks</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> SuspenseHydrationCallbacks<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberRoot <span class="token punctuation">{</span>
  <span class="token comment">// 创建fiberRootNode</span>
  <span class="token keyword">const</span> <span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 创建rootFiber</span>
  <span class="token keyword">const</span> uninitializedFiber <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 连接rootFiber与fiberRootNode</span>
  root<span class="token punctuation">.</span>current <span class="token operator">=</span> uninitializedFiber<span class="token punctuation">;</span>
  uninitializedFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> root<span class="token punctuation">;</span>

  <span class="token comment">// 初始化updateQueue</span>
  <span class="token function">initializeUpdateQueue</span><span class="token punctuation">(</span>uninitializedFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j=n("code",null,"rootFiber",-1),C=n("code",null,"fiberRootNode",-1),O=["src"],x={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberRoot.new.js#L97",target:"_blank",rel:"noopener noreferrer"},N=t(`<h2 id="创建update" tabindex="-1"><a class="header-anchor" href="#创建update" aria-hidden="true">#</a> 创建update</h2><p>我们已经做好了组件的初始化工作，接下来就等待创建<code>Update</code>来开启一次更新。</p><p>这一步发生在<code>updateContainer</code>方法中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  <span class="token literal-property property">container</span><span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">parentComponent</span><span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>
  <span class="token comment">// ...省略与逻辑不相关代码</span>

  <span class="token comment">// 创建update</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> suspenseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// update.payload为需要挂载在根节点的组件</span>
  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span>element<span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// callback为ReactDOM.render的第三个参数 —— 回调函数</span>
  callback <span class="token operator">=</span> callback <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> callback<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将生成的update加入updateQueue</span>
  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调度更新</span>
  <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...省略与逻辑不相关代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),B={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberReconciler.new.js#L255",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"updateContainer",-1),M=n("p",null,[e("值得注意的是其中"),n("code",null,"update.payload = {element};")],-1),z=n("code",null,"HostRoot",-1),S=n("code",null,"payload",-1),E=n("code",null,"ReactDOM.render",-1),L=t(`<h2 id="流程概览" tabindex="-1"><a class="header-anchor" href="#流程概览" aria-hidden="true">#</a> 流程概览</h2><p>至此，<code>ReactDOM.render</code>的流程就和我们已知的流程连接上了。</p><p>整个流程如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>创建fiberRootNode、rootFiber、updateQueue（<span class="token variable"><span class="token variable">\`</span>legacyCreateRootFromDOMContainer<span class="token variable">\`</span></span>）

    <span class="token operator">|</span>
    <span class="token operator">|</span>
    <span class="token function">v</span>

创建Update对象（<span class="token variable"><span class="token variable">\`</span>updateContainer<span class="token variable">\`</span></span>）

    <span class="token operator">|</span>
    <span class="token operator">|</span>
    <span class="token function">v</span>

从fiber到root（<span class="token variable"><span class="token variable">\`</span>markUpdateLaneFromFiberToRoot<span class="token variable">\`</span></span>）

    <span class="token operator">|</span>
    <span class="token operator">|</span>
    <span class="token function">v</span>

调度更新（<span class="token variable"><span class="token variable">\`</span>ensureRootIsScheduled<span class="token variable">\`</span></span>）

    <span class="token operator">|</span>
    <span class="token operator">|</span>
    <span class="token function">v</span>

render阶段（<span class="token variable"><span class="token variable">\`</span>performSyncWorkOnRoot<span class="token variable">\`</span></span> 或 <span class="token variable"><span class="token variable">\`</span>performConcurrentWorkOnRoot<span class="token variable">\`</span></span>）

    <span class="token operator">|</span>
    <span class="token operator">|</span>
    <span class="token function">v</span>

commit阶段（<span class="token variable"><span class="token variable">\`</span>commitRoot<span class="token variable">\`</span></span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react的其他入口函数" tabindex="-1"><a class="header-anchor" href="#react的其他入口函数" aria-hidden="true">#</a> React的其他入口函数</h2><p>当前<code>React</code>共有三种模式：</p><ul><li><p><code>legacy</code>，这是当前<code>React</code>使用的方式。当前没有计划删除本模式，但是这个模式可能不支持一些新功能。</p></li><li><p><code>blocking</code>，开启部分<code>concurrent</code>模式特性的中间模式。目前正在实验中。作为迁移到<code>concurrent</code>模式的第一个步骤。</p></li><li><p><code>concurrent</code>，面向未来的开发模式。我们之前讲的<code>任务中断/任务优先级</code>都是针对<code>concurrent</code>模式。</p></li></ul><p>你可以从下表看出各种模式对特性的支持：</p>`,8),U=n("thead",null,[n("tr",null,[n("th"),n("th",null,"legacy 模式"),n("th",null,"blocking 模式"),n("th",null,"concurrent 模式")])],-1),A={href:"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs",target:"_blank",rel:"noopener noreferrer"},H=n("td",null,"✅",-1),I=n("td",null,"🚫**",-1),T=n("td",null,"🚫**",-1),q={href:"https://zh-hans.reactjs.org/docs/legacy-context.html",target:"_blank",rel:"noopener noreferrer"},Q=n("td",null,"✅",-1),V=n("td",null,"🚫**",-1),J=n("td",null,"🚫**",-1),P={href:"https://zh-hans.reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage",target:"_blank",rel:"noopener noreferrer"},$=n("td",null,"✅",-1),W=n("td",null,"🚫**",-1),X=n("td",null,"🚫**",-1),Y={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-suspense.html#what-is-suspense-exactly",target:"_blank",rel:"noopener noreferrer"},Z=n("td",null,"✅",-1),G=n("td",null,"✅",-1),K=n("td",null,"✅",-1),nn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-patterns.html#suspenselist",target:"_blank",rel:"noopener noreferrer"},en=n("td",null,"🚫",-1),sn=n("td",null,"✅",-1),an=n("td",null,"✅",-1),tn=n("tr",null,[n("td",null,"Suspense SSR + Hydration"),n("td",null,"🚫"),n("td",null,"✅"),n("td",null,"✅")],-1),on=n("tr",null,[n("td",null,"Progressive Hydration"),n("td",null,"🚫"),n("td",null,"✅"),n("td",null,"✅")],-1),ln=n("tr",null,[n("td",null,"Selective Hydration"),n("td",null,"🚫"),n("td",null,"🚫"),n("td",null,"✅")],-1),cn=n("tr",null,[n("td",null,"Cooperative Multitasking"),n("td",null,"🚫"),n("td",null,"🚫"),n("td",null,"✅")],-1),rn=n("tr",null,[n("td",null,"Automatic batching of multiple setStates"),n("td",null,"🚫*"),n("td",null,"✅"),n("td",null,"✅")],-1),pn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-patterns.html#splitting-high-and-low-priority-state",target:"_blank",rel:"noopener noreferrer"},dn=n("td",null,"🚫",-1),un=n("td",null,"🚫",-1),kn=n("td",null,"✅",-1),vn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-intro.html#interruptible-rendering",target:"_blank",rel:"noopener noreferrer"},bn=n("td",null,"🚫",-1),hn=n("td",null,"🚫",-1),mn=n("td",null,"✅",-1),_n={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-patterns.html#transitions",target:"_blank",rel:"noopener noreferrer"},fn=n("td",null,"🚫",-1),gn=n("td",null,"🚫",-1),yn=n("td",null,"✅",-1),Rn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-patterns.html#deferring-a-value",target:"_blank",rel:"noopener noreferrer"},Fn=n("td",null,"🚫",-1),wn=n("td",null,"🚫",-1),jn=n("td",null,"✅",-1),Cn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-patterns.html#suspense-reveal-train",target:"_blank",rel:"noopener noreferrer"},On=n("td",null,"🚫",-1),xn=n("td",null,"🚫",-1),Nn=n("td",null,"✅",-1),Bn=t("<p>*：<code>legacy</code>模式在合成事件中有自动批处理的功能，但仅限于一个浏览器任务。非<code>React</code>事件想使用这个功能必须使用 <code>unstable_batchedUpdates</code>。在<code>blocking</code>模式和<code>concurrent</code>模式下，所有的<code>setState</code>在默认情况下都是批处理的。</p><p>**：会在开发中发出警告。</p><p>模式的变化影响整个应用的工作方式，所以无法只针对某个组件开启不同模式。</p><p>基于此原因，可以通过不同的<code>入口函数</code>开启不同模式：</p><ul><li><code>legacy</code> -- <code>ReactDOM.render(&lt;App /&gt;, rootNode)</code></li><li><code>blocking</code> -- <code>ReactDOM.createBlockingRoot(rootNode).render(&lt;App /&gt;)</code></li><li><code>concurrent</code> -- <code>ReactDOM.createRoot(rootNode).render(&lt;App /&gt;)</code></li></ul>",5),Dn={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-adoption.html#why-so-many-modes",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"React",-1),zn=n("code",null,"入口函数",-1),Sn=n("code",null,"fiber.mode",-1);function En(r,Ln){const o=c("RouterLink"),a=c("ExternalLinkIcon");return i(),d("div",null,[k,v,b,n("p",null,[e("从"),s(o,{to:"/views/Books/Front-end/JustReact/process/doubleBuffer.html#mount%E6%97%B6"},{default:l(()=>[e("双缓存机制一节")]),_:1}),e("我们知道，首次执行"),h,e("会创建"),m,e("和"),_,e("。其中"),f,e("是整个应用的根节点，"),g,e("是要渲染组件所在组件树的"),y,e("。")]),R,n("blockquote",null,[n("p",null,[e("你可以从"),n("a",F,[e("这里"),s(a)]),e("看到这一步的代码")])]),w,n("p",null,[e("根据以上代码，现在我们可以在"),s(o,{to:"/views/Books/Front-end/JustReact/process/doubleBuffer.html#mount%E6%97%B6"},{default:l(()=>[e("双缓存机制一节")]),_:1}),e("基础上补充上"),j,e("到"),C,e("的引用。")]),n("img",{src:r.$withBase("/img/fiberroot.png"),alt:"fiberRoot"},null,8,O),n("blockquote",null,[n("p",null,[e("你可以从"),n("a",x,[e("这里"),s(a)]),e("看到这一步的代码")])]),N,n("blockquote",null,[n("p",null,[e("你可以从"),n("a",B,[e("这里"),s(a)]),e("看到"),D,e("的代码")])]),M,n("p",null,[e("这就是我们在"),s(o,{to:"/views/Books/Front-end/JustReact/state/update.html#update%E7%9A%84%E7%BB%93%E6%9E%84"},{default:l(()=>[e("Update一节")]),_:1}),e("介绍的，对于"),z,e("，"),S,e("为"),E,e("的第一个传参。")]),L,n("table",null,[U,n("tbody",null,[n("tr",null,[n("td",null,[n("a",A,[e("String Refs"),s(a)])]),H,I,T]),n("tr",null,[n("td",null,[n("a",q,[e("Legacy Context"),s(a)])]),Q,V,J]),n("tr",null,[n("td",null,[n("a",P,[e("findDOMNode"),s(a)])]),$,W,X]),n("tr",null,[n("td",null,[n("a",Y,[e("Suspense"),s(a)])]),Z,G,K]),n("tr",null,[n("td",null,[n("a",nn,[e("SuspenseList"),s(a)])]),en,sn,an]),tn,on,ln,cn,rn,n("tr",null,[n("td",null,[n("a",pn,[e("Priority-based Rendering"),s(a)])]),dn,un,kn]),n("tr",null,[n("td",null,[n("a",vn,[e("Interruptible Prerendering"),s(a)])]),bn,hn,mn]),n("tr",null,[n("td",null,[n("a",_n,[e("useTransition"),s(a)])]),fn,gn,yn]),n("tr",null,[n("td",null,[n("a",Rn,[e("useDeferredValue"),s(a)])]),Fn,wn,jn]),n("tr",null,[n("td",null,[n("a",Cn,[e('Suspense Reveal "Train"'),s(a)])]),On,xn,Nn])])]),Bn,n("blockquote",null,[n("p",null,[e("你可以在"),n("a",Dn,[e("这里"),s(a)]),e("看到"),Mn,e("团队解释为什么会有这么多模式")])]),n("p",null,[e("虽然不同模式的"),zn,e("不同，但是他们仅对"),Sn,e("变量产生影响，对我们在"),s(o,{to:"/views/Books/Front-end/JustReact/state/reactdom.html#%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88"},{default:l(()=>[e("流程概览")]),_:1}),e("中描述的流程并无影响。")])])}const An=p(u,[["render",En],["__file","reactdom.html.vue"]]);export{An as default};
