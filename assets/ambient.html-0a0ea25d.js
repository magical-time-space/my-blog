import{_ as p,X as o,Y as c,Z as n,$ as s,a0 as e,a4 as t,E as i}from"./framework-d8252107.js";const l={},r=n("h1",{id:"环境声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#环境声明","aria-hidden":"true"},"#"),s(" 环境声明")],-1),d={href:"https://basarat.gitbooks.io/typescript/content/docs/why-typescript.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<blockquote><p>TypeScript 的设计目标之一是让你在 TypeScript 中安全、轻松地使用现有的 JavaScript 库，TypeScript 通过声明文件来做到这一点</p></blockquote><p>环境声明允许你安全地使用现有的 JavaScript 库，并且能让你的 JavaScript、CoffeeScript 或者其他需要编译成 JavaScript 的语言逐步迁移至 TypeScript。</p><p>学习为第三方 JavaScript 库编写环境声明，是一种为 TypeScript 写注解比较好的实践方式。</p><h2 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件</h2><p>你可以通过 <code>declare</code> 关键字来告诉 TypeScript，你正在试图表述一个其他地方已经存在的代码，如：写在 JavaScript、CoffeeScript 或者是像浏览器和 Node.js 运行环境里的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Error: &#39;foo&#39; is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> foo<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// allow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以选择把这些声明放入 <code>.ts</code> 或者 <code>.d.ts</code> 里。在你实际的项目里，我们强烈建议你应该把声明放入独立的 <code>.d.ts</code> 里（可以从一个命名为 <code>global.d.ts</code> 或者 <code>vendor.d.ts</code> 文件开始）。</p><p>如果一个文件有扩展名 <code>.d.ts</code>，这意味着每个根级别的声明都必须以 <code>declare</code> 关键字作为前缀。这有利于让开发者清楚的知道，在这里 TypeScript 将不会把它编译成任何代码，同时开发者需要确保这些在编译时存在。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>环境声明就好像你与编译器之间的一个约定，如果在编译时它们不存在，但是你却使用了它们，程序将会在没有警告的情况下中断。</li><li>环境声明就好像是一个文档。如果源文件更新了，你应该同步更新。所以，当你在运行时有新的行为时，如果没有去更新环境声明，编译器将会报错。</li></ul></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>当你想告诉 TypeScript 编辑器关于 <code>process</code> 变量时，你可以这么做：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> process<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),k={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),m=n("code",null,"process",-1),b={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/index.d.ts",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"node.d.ts",-1),y=t(`<p>这允许你使用 <code>process</code>，并能成功通过 TypeScript 的编译：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们推荐尽可能的使用接口，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Process</span> <span class="token punctuation">{</span>
  <span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">let</span> process<span class="token operator">:</span> Process<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这允许其他人扩充这些全局变量，并且会告诉 TypeScript 有关于这些声明的修改。例如：考虑到以下情况，我们添加一个 <code>exitWithLogging</code> 函数至 <code>process</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Process</span> <span class="token punctuation">{</span>
  <span class="token function">exitWithLogging</span><span class="token punctuation">(</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

process<span class="token punctuation">.</span><span class="token function-variable function">exitWithLogging</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;exiting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们更详细的了解接口。</p>`,7);function g(f,_){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("正如我们在为什么使用 "),n("a",d,[s("TypeScript"),e(a)]),s(" 中所说：")]),u,n("div",k,[v,n("p",null,[s("你并不需要为 "),m,s(" 做这些，因为这已经存在于社区维护的 "),n("a",b,[h,e(a)])])]),y])}const S=p(l,[["render",g],["__file","ambient.html.vue"]]);export{S as default};
