const n=JSON.parse('{"key":"v-7c8fff9c","path":"/views/Books/Front-end/TypescriptMaster/typings/typeGuard.html","title":"类型保护","lang":"zh-CN","frontmatter":{"description":"类型保护 类型保护允许你使用更小范围下的对象类型。 typeof TypeScript 熟知 JavaScript 中 instanceof 和 typeof 运算符的用法。如果你在一个条件块中使用这些，TypeScript 将会推导出在条件块中的的变量类型。如下例所示，TypeScript 将会辨别 string 上是否存在特定的函数，以及是否发生了拼写错误： function doSome(x: number | string) { if (typeof x === \'string\') { // 在这个块中，TypeScript 知道 `x` 的类型必须是 `string` console.log(x.subtr(1)); // Error: \'subtr\' 方法并没有存在于 `string` 上 console.log(x.substr(1)); // ok } x.substr(1); // Error: 无法保证 `x` 是 `string` 类型 }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/typeGuard.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"类型保护"}],["meta",{"property":"og:description","content":"类型保护 类型保护允许你使用更小范围下的对象类型。 typeof TypeScript 熟知 JavaScript 中 instanceof 和 typeof 运算符的用法。如果你在一个条件块中使用这些，TypeScript 将会推导出在条件块中的的变量类型。如下例所示，TypeScript 将会辨别 string 上是否存在特定的函数，以及是否发生了拼写错误： function doSome(x: number | string) { if (typeof x === \'string\') { // 在这个块中，TypeScript 知道 `x` 的类型必须是 `string` console.log(x.subtr(1)); // Error: \'subtr\' 方法并没有存在于 `string` 上 console.log(x.substr(1)); // ok } x.substr(1); // Error: 无法保证 `x` 是 `string` 类型 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型保护\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":2,"title":"in","slug":"in","link":"#in","children":[]},{"level":2,"title":"字面量类型保护","slug":"字面量类型保护","link":"#字面量类型保护","children":[]},{"level":2,"title":"使用定义的类型保护","slug":"使用定义的类型保护","link":"#使用定义的类型保护","children":[]}],"git":{},"readingTime":{"minutes":2.22,"words":667},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/typeGuard.md","excerpt":"<h1> 类型保护</h1>\\n<p>类型保护允许你使用更小范围下的对象类型。</p>\\n<h2> typeof</h2>\\n<p>TypeScript 熟知 JavaScript 中 <code>instanceof</code> 和 <code>typeof</code> 运算符的用法。如果你在一个条件块中使用这些，TypeScript 将会推导出在条件块中的的变量类型。如下例所示，TypeScript 将会辨别 <code>string</code> 上是否存在特定的函数，以及是否发生了拼写错误：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">doSome</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> x <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\'string\'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 在这个块中，TypeScript 知道 `x` 的类型必须是 `string`</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subtr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: \'subtr\' 方法并没有存在于 `string` 上</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">substr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// ok</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  x<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">substr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 无法保证 `x` 是 `string` 类型</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
