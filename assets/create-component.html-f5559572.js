const n=JSON.parse(`{"key":"v-837bea58","path":"/views/Books/Front-end/JustVue2/components/create-component.html","title":"createComponent","lang":"zh-CN","frontmatter":{"description":"createComponent 上一章我们在分析 createElement 的实现的时候，它最终会调用 _createElement 方法，其中有一段逻辑是对参数 tag 的判断，如果是一个普通的 html 标签，像上一章的例子那样是一个普通的 div，则会实例化一个普通 VNode 节点，否则通过 createComponent 方法创建一个组件 VNode。 if (typeof tag === 'string') { let Ctor ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) { // platform built-in elements vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) { // component vnode = createComponent(Ctor, data, context, children, tag) } else { // unknown or unlisted namespaced elements // check at runtime because it may get assigned a namespace when its // parent normalizes children vnode = new VNode( tag, data, children, undefined, undefined, context ) } } else { // direct component options / constructor vnode = createComponent(tag, data, context, children) }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/components/create-component.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"createComponent"}],["meta",{"property":"og:description","content":"createComponent 上一章我们在分析 createElement 的实现的时候，它最终会调用 _createElement 方法，其中有一段逻辑是对参数 tag 的判断，如果是一个普通的 html 标签，像上一章的例子那样是一个普通的 div，则会实例化一个普通 VNode 节点，否则通过 createComponent 方法创建一个组件 VNode。 if (typeof tag === 'string') { let Ctor ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag) if (config.isReservedTag(tag)) { // platform built-in elements vnode = new VNode( config.parsePlatformTagName(tag), data, children, undefined, undefined, context ) } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) { // component vnode = createComponent(Ctor, data, context, children, tag) } else { // unknown or unlisted namespaced elements // check at runtime because it may get assigned a namespace when its // parent normalizes children vnode = new VNode( tag, data, children, undefined, undefined, context ) } } else { // direct component options / constructor vnode = createComponent(tag, data, context, children) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"createComponent\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"构造子类构造函数","slug":"构造子类构造函数","link":"#构造子类构造函数","children":[]},{"level":2,"title":"安装组件钩子函数","slug":"安装组件钩子函数","link":"#安装组件钩子函数","children":[]},{"level":2,"title":"实例化 VNode","slug":"实例化-vnode","link":"#实例化-vnode","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":7.05,"words":2116},"filePathRelative":"views/Books/Front-end/JustVue2/components/create-component.md","excerpt":"<h1> createComponent</h1>\\n<p>上一章我们在分析 <code>createElement</code> 的实现的时候，它最终会调用 <code>_createElement</code> 方法，其中有一段逻辑是对参数 <code>tag</code> 的判断，如果是一个普通的 html 标签，像上一章的例子那样是一个普通的 div，则会实例化一个普通 VNode 节点，否则通过 <code>createComponent</code> 方法创建一个组件 VNode。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> tag <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> Ctor\\n  ns <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>$vnode <span class=\\"token operator\\">&amp;&amp;</span> context<span class=\\"token punctuation\\">.</span>$vnode<span class=\\"token punctuation\\">.</span>ns<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> config<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getTagNamespace</span><span class=\\"token punctuation\\">(</span>tag<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isReservedTag</span><span class=\\"token punctuation\\">(</span>tag<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// platform built-in elements</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">VNode</span><span class=\\"token punctuation\\">(</span>\\n      config<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parsePlatformTagName</span><span class=\\"token punctuation\\">(</span>tag<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">,</span> children<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> context\\n    <span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isDef</span><span class=\\"token punctuation\\">(</span>Ctor <span class=\\"token operator\\">=</span> <span class=\\"token function\\">resolveAsset</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>$options<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'components'</span><span class=\\"token punctuation\\">,</span> tag<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// component</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createComponent</span><span class=\\"token punctuation\\">(</span>Ctor<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">,</span> children<span class=\\"token punctuation\\">,</span> tag<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// unknown or unlisted namespaced elements</span>\\n    <span class=\\"token comment\\">// check at runtime because it may get assigned a namespace when its</span>\\n    <span class=\\"token comment\\">// parent normalizes children</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">VNode</span><span class=\\"token punctuation\\">(</span>\\n      tag<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">,</span> children<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">,</span> context\\n    <span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// direct component options / constructor</span>\\n  vnode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createComponent</span><span class=\\"token punctuation\\">(</span>tag<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">,</span> children<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
