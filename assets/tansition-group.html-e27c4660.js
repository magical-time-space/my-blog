const n=JSON.parse(`{"key":"v-47f16131","path":"/views/Books/Front-end/JustVue2/extend/tansition-group.html","title":"transition-group","lang":"zh-CN","frontmatter":{"description":"transition-group 前一节我们介绍了 &lt;transiiton&gt; 组件的实现原理，它只能针对单一元素实现过渡效果。我们做前端开发经常会遇到列表的需求，我们对列表元素进行添加和删除，有时候也希望有过渡效果，Vue.js 提供了 &lt;transition-group&gt; 组件，很好地帮助我们实现了列表的过渡效果。那么接下来我们就来分析一下它的实现原理。 为了更直观，我们也是通过一个示例来说明： let vm = new Vue({ el: '#app', template: '&lt;div id=\\"list-complete-demo\\" class=\\"demo\\"&gt;' + '&lt;button v-on:click=\\"add\\"&gt;Add&lt;/button&gt;' + '&lt;button v-on:click=\\"remove\\"&gt;Remove&lt;/button&gt;' + '&lt;transition-group name=\\"list-complete\\" tag=\\"p\\"&gt;' + '&lt;span v-for=\\"item in items\\" v-bind:key=\\"item\\" class=\\"list-complete-item\\"&gt;' + '{{ item }}' + '&lt;/span&gt;' + '&lt;/transition-group&gt;' + '&lt;/div&gt;', data: { items: [1, 2, 3, 4, 5, 6, 7, 8, 9], nextNum: 10 }, methods: { randomIndex: function () { return Math.floor(Math.random() * this.items.length) }, add: function () { this.items.splice(this.randomIndex(), 0, this.nextNum++) }, remove: function () { this.items.splice(this.randomIndex(), 1) } } })","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/extend/tansition-group.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"transition-group"}],["meta",{"property":"og:description","content":"transition-group 前一节我们介绍了 &lt;transiiton&gt; 组件的实现原理，它只能针对单一元素实现过渡效果。我们做前端开发经常会遇到列表的需求，我们对列表元素进行添加和删除，有时候也希望有过渡效果，Vue.js 提供了 &lt;transition-group&gt; 组件，很好地帮助我们实现了列表的过渡效果。那么接下来我们就来分析一下它的实现原理。 为了更直观，我们也是通过一个示例来说明： let vm = new Vue({ el: '#app', template: '&lt;div id=\\"list-complete-demo\\" class=\\"demo\\"&gt;' + '&lt;button v-on:click=\\"add\\"&gt;Add&lt;/button&gt;' + '&lt;button v-on:click=\\"remove\\"&gt;Remove&lt;/button&gt;' + '&lt;transition-group name=\\"list-complete\\" tag=\\"p\\"&gt;' + '&lt;span v-for=\\"item in items\\" v-bind:key=\\"item\\" class=\\"list-complete-item\\"&gt;' + '{{ item }}' + '&lt;/span&gt;' + '&lt;/transition-group&gt;' + '&lt;/div&gt;', data: { items: [1, 2, 3, 4, 5, 6, 7, 8, 9], nextNum: 10 }, methods: { randomIndex: function () { return Math.floor(Math.random() * this.items.length) }, add: function () { this.items.splice(this.randomIndex(), 0, this.nextNum++) }, remove: function () { this.items.splice(this.randomIndex(), 1) } } })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"transition-group\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"render 函数","slug":"render-函数","link":"#render-函数","children":[]},{"level":2,"title":"move 过渡实现","slug":"move-过渡实现","link":"#move-过渡实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":8.54,"words":2561},"filePathRelative":"views/Books/Front-end/JustVue2/extend/tansition-group.md","excerpt":"<h1> transition-group</h1>\\n<p>前一节我们介绍了 <code>&lt;transiiton&gt;</code> 组件的实现原理，它只能针对单一元素实现过渡效果。我们做前端开发经常会遇到列表的需求，我们对列表元素进行添加和删除，有时候也希望有过渡效果，Vue.js 提供了 <code>&lt;transition-group&gt;</code> 组件，很好地帮助我们实现了列表的过渡效果。那么接下来我们就来分析一下它的实现原理。</p>\\n<p>为了更直观，我们也是通过一个示例来说明：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> vm <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">el</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'#app'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'&lt;div id=\\"list-complete-demo\\" class=\\"demo\\"&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;button v-on:click=\\"add\\"&gt;Add&lt;/button&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;button v-on:click=\\"remove\\"&gt;Remove&lt;/button&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;transition-group name=\\"list-complete\\" tag=\\"p\\"&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;span v-for=\\"item in items\\" v-bind:key=\\"item\\" class=\\"list-complete-item\\"&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'{{ item }}'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;/span&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;/transition-group&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;/div&gt;'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">items</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">nextNum</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">10</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">randomIndex</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">add</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">randomIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>nextNum<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">remove</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">splice</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">randomIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
