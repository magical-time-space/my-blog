const e=JSON.parse(`{"key":"v-7ce41f39","path":"/views/Books/Front-end/TypescriptMaster/faqs/type-guards.html","title":"类型守卫","lang":"zh-CN","frontmatter":{"description":"类型守卫 为什么 x instanceof Foo 不能将 x 的类型缩小至 Foo？ 这取决于 x 是什么？如果 x 的类型不与 Foo 兼容，那么缩小 x 的类型就毫无意义，所以我们不会这么做。 当你发现 x 具有任何类型时，我们对此推荐的做法是： function doIt(x) { if (x instanceof Object) { // Assume 'x' is a well-known object which // we know how to handle specifically } // Treat 'x' as a primitive }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/faqs/type-guards.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"类型守卫"}],["meta",{"property":"og:description","content":"类型守卫 为什么 x instanceof Foo 不能将 x 的类型缩小至 Foo？ 这取决于 x 是什么？如果 x 的类型不与 Foo 兼容，那么缩小 x 的类型就毫无意义，所以我们不会这么做。 当你发现 x 具有任何类型时，我们对此推荐的做法是： function doIt(x) { if (x instanceof Object) { // Assume 'x' is a well-known object which // we know how to handle specifically } // Treat 'x' as a primitive }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型守卫\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"为什么 x instanceof Foo 不能将 x 的类型缩小至 Foo？","slug":"为什么-x-instanceof-foo-不能将-x-的类型缩小至-foo","link":"#为什么-x-instanceof-foo-不能将-x-的类型缩小至-foo","children":[]}],"git":{},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"views/Books/Front-end/TypescriptMaster/faqs/type-guards.md","excerpt":"<h1> 类型守卫</h1>\\n<h2> 为什么 <code>x instanceof Foo</code> 不能将 <code>x</code> 的类型缩小至 <code>Foo</code>？</h2>\\n<p>这取决于 <code>x</code> 是什么？如果 <code>x</code> 的类型不与 <code>Foo</code> 兼容，那么缩小 <code>x</code> 的类型就毫无意义，所以我们不会这么做。</p>\\n<p>当你发现 <code>x</code> 具有任何类型时，我们对此推荐的做法是：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">doIt</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// Assume 'x' is a well-known object which</span>\\n    <span class=\\"token comment\\">// we know how to handle specifically</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// Treat 'x' as a primitive</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
