const t=JSON.parse('{"key":"v-81cca3a8","path":"/views/Books/Front-end/TypescriptMaster/tips/nominalTyping.html","title":"名义化类型","lang":"zh-CN","frontmatter":{"description":"名义化类型 TypeScript 的类型系统是结构化的，这也是其主要的优点之一。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。 这有一些社区使用的方式，我按照个人喜好降序排列：","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/tips/nominalTyping.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"名义化类型"}],["meta",{"property":"og:description","content":"名义化类型 TypeScript 的类型系统是结构化的，这也是其主要的优点之一。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。 这有一些社区使用的方式，我按照个人喜好降序排列："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"名义化类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"使用字面量类型","slug":"使用字面量类型","link":"#使用字面量类型","children":[]},{"level":2,"title":"使用枚举","slug":"使用枚举","link":"#使用枚举","children":[]},{"level":2,"title":"使用接口","slug":"使用接口","link":"#使用接口","children":[]}],"git":{},"readingTime":{"minutes":2.81,"words":842},"filePathRelative":"views/Books/Front-end/TypescriptMaster/tips/nominalTyping.md","excerpt":"<h1> 名义化类型</h1>\\n<p>TypeScript 的类型系统是结构化的，<a href=\\"https://basarat.gitbooks.io/typescript/content/docs/why-typescript.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这也是其主要的优点之一</a>。然而，在实际的特定用例中，有时尽管变量具有相同的结构，你也想将他们视为不同类型。一个非常常见的用例是身份类型结构（它们可能只是在 C# 或者 Java 中表示一个它们语义化名字的字符串）。</p>\\n<p>这有一些社区使用的方式，我按照个人喜好降序排列：</p>","autoDesc":true}');export{t as data};
