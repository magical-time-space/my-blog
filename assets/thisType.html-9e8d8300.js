const t=JSON.parse('{"key":"v-0d6ba45d","path":"/views/Books/Front-end/TypescriptMaster/typings/thisType.html","title":"ThisType","lang":"zh-CN","frontmatter":{"description":"ThisType 通过 ThisType 我们可以在对象字面量中键入 this，并提供通过上下文类型控制 this 类型的便捷方式。它只有在 --noImplicitThis 的选项下才有效。 现在，在对象字面量方法中的 this 类型，将由以下决定： 如果这个方法显式指定了 this 参数，那么 this 具有该参数的类型。（下例子中 bar） 否则，如果方法由带 this 参数的签名进行上下文键入，那么 this 具有该参数的类型。（下例子中 foo） 否则，如果 --noImplicitThis 选项已经启用，并且对象字面量中包含由 ThisType&lt;T&gt; 键入的上下文类型，那么 this 的类型为 T。 否则，如果 --noImplicitThis 选项已经启用，并且对象字面量中不包含由 ThisType&lt;T&gt; 键入的上下文类型，那么 this 的类型为该上下文类型。 否则，如果 --noImplicitThis 选项已经启用，this 具有该对象字面量的类型。 否则，this 的类型为 any。","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/thisType.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"ThisType"}],["meta",{"property":"og:description","content":"ThisType 通过 ThisType 我们可以在对象字面量中键入 this，并提供通过上下文类型控制 this 类型的便捷方式。它只有在 --noImplicitThis 的选项下才有效。 现在，在对象字面量方法中的 this 类型，将由以下决定： 如果这个方法显式指定了 this 参数，那么 this 具有该参数的类型。（下例子中 bar） 否则，如果方法由带 this 参数的签名进行上下文键入，那么 this 具有该参数的类型。（下例子中 foo） 否则，如果 --noImplicitThis 选项已经启用，并且对象字面量中包含由 ThisType&lt;T&gt; 键入的上下文类型，那么 this 的类型为 T。 否则，如果 --noImplicitThis 选项已经启用，并且对象字面量中不包含由 ThisType&lt;T&gt; 键入的上下文类型，那么 this 的类型为该上下文类型。 否则，如果 --noImplicitThis 选项已经启用，this 具有该对象字面量的类型。 否则，this 的类型为 any。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThisType\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.3,"words":690},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/thisType.md","excerpt":"<h1> ThisType</h1>\\n<p>通过 <code>ThisType</code> 我们可以在对象字面量中键入 <code>this</code>，并提供通过上下文类型控制 <code>this</code> 类型的便捷方式。它只有在 <code>--noImplicitThis</code> 的选项下才有效。</p>\\n<p>现在，在对象字面量方法中的 <code>this</code> 类型，将由以下决定：</p>\\n<ul>\\n<li>如果这个方法显式指定了 <code>this</code> 参数，那么 <code>this</code> 具有该参数的类型。（下例子中 <code>bar</code>）</li>\\n<li>否则，如果方法由带 <code>this</code> 参数的签名进行上下文键入，那么 <code>this</code> 具有该参数的类型。（下例子中 <code>foo</code>）</li>\\n<li>否则，如果 <code>--noImplicitThis</code> 选项已经启用，并且对象字面量中包含由 <code>ThisType&lt;T&gt;</code> 键入的上下文类型，那么 <code>this</code> 的类型为 <code>T</code>。</li>\\n<li>否则，如果 <code>--noImplicitThis</code> 选项已经启用，并且对象字面量中不包含由 <code>ThisType&lt;T&gt;</code> 键入的上下文类型，那么 <code>this</code> 的类型为该上下文类型。</li>\\n<li>否则，如果 <code>--noImplicitThis</code> 选项已经启用，<code>this</code> 具有该对象字面量的类型。</li>\\n<li>否则，<code>this</code> 的类型为 <code>any</code>。</li>\\n</ul>","autoDesc":true}');export{t as data};
