import{_ as t,X as o,Y as p,Z as s,$ as e,a0 as a,a4 as c,E as r}from"./framework-d8252107.js";const i={},l=c(`<h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h1><h2 id="为什么我导入的模块在编译后被删除了" tabindex="-1"><a class="header-anchor" href="#为什么我导入的模块在编译后被删除了" aria-hidden="true">#</a> 为什么我导入的模块在编译后被删除了？</h2><blockquote><p>我写了一些这样的代码</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> someModule <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myMod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> x<span class="token operator">:</span> someModule<span class="token punctuation">.</span>SomeType <span class="token operator">=</span> <span class="token comment">/* something */</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>有这样的输出</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Expected to see &quot;var someModule = require(&#39;./myMod&#39;);&quot; here!</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token comment">/* something */</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TypeScript</code> 假定导入的模块没有副作用，所以它移除了不用于任何表达式的模块导入。</p><p>使用 <code>import &quot;mod&quot;</code> 语法来强制加载模块</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;./myMod&#39;</span><span class="token punctuation">;</span> <span class="token comment">// For side effects</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以简单调用模块，这是最常见的解决办法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> someModule <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myMod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
someModule<span class="token punctuation">;</span> <span class="token comment">// Used for side effects</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么不跨模块文件合并命名空间" tabindex="-1"><a class="header-anchor" href="#为什么不跨模块文件合并命名空间" aria-hidden="true">#</a> 为什么不跨模块文件合并命名空间？</h2>`,12),d={href:"https://stackoverflow.com/questions/30357634/how-do-i-use-namespaces-with-typescript-external-modules",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html#namespace-keyword",target:"_blank",rel:"noopener noreferrer"};function m(k,h){const n=r("ExternalLinkIcon");return o(),p("div",null,[l,s("p",null,[e("TODO：本小节内容请查看："),s("a",d,[e("https://stackoverflow.com/questions/30357634/how-do-i-use-namespaces-with-typescript-external-modules"),a(n)]),e(" 或者 "),s("a",u,[e("https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html#namespace-keyword"),a(n)])])])}const y=t(i,[["render",m],["__file","modules.html.vue"]]);export{y as default};
