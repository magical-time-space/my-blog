const n=JSON.parse(`{"key":"v-693d987b","path":"/views/Books/Front-end/JustVue2/data-driven/render.html","title":"render","lang":"zh-CN","frontmatter":{"description":"render Vue 的 _render 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 src/core/instance/render.js 文件中： Vue.prototype._render = function (): VNode { const vm: Component = this const { render, _parentVnode } = vm.$options // reset _rendered flag on slots for duplicate slot check if (p​rocess.env.NODE_ENV !== 'production') { for (const key in vm.$slots) { // $flow-disable-line vm.$slots[key]._rendered = false } } if (_parentVnode) { vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject } // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode // render self let vnode try { vnode = render.call(vm._renderProxy, vm.$createElement) } catch (e) { handleError(e, vm, \`render\`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (p​rocess.env.NODE_ENV !== 'production') { if (vm.$options.renderError) { try { vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) } catch (e) { handleError(e, vm, \`renderError\`) vnode = vm._vnode } } else { vnode = vm._vnode } } else { vnode = vm._vnode } } // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) { if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; Array.isArray(vnode)) { warn( 'Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm ) } vnode = createEmptyVNode() } // set parent vnode.parent = _parentVnode return vnode }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/data-driven/render.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"render"}],["meta",{"property":"og:description","content":"render Vue 的 _render 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 src/core/instance/render.js 文件中： Vue.prototype._render = function (): VNode { const vm: Component = this const { render, _parentVnode } = vm.$options // reset _rendered flag on slots for duplicate slot check if (p​rocess.env.NODE_ENV !== 'production') { for (const key in vm.$slots) { // $flow-disable-line vm.$slots[key]._rendered = false } } if (_parentVnode) { vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject } // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode // render self let vnode try { vnode = render.call(vm._renderProxy, vm.$createElement) } catch (e) { handleError(e, vm, \`render\`) // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (p​rocess.env.NODE_ENV !== 'production') { if (vm.$options.renderError) { try { vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) } catch (e) { handleError(e, vm, \`renderError\`) vnode = vm._vnode } } else { vnode = vm._vnode } } else { vnode = vm._vnode } } // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) { if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; Array.isArray(vnode)) { warn( 'Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm ) } vnode = createEmptyVNode() } // set parent vnode.parent = _parentVnode return vnode }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"render\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":2.23,"words":668},"filePathRelative":"views/Books/Front-end/JustVue2/data-driven/render.md","excerpt":"<h1> render</h1>\\n<p>Vue 的 <code>_render</code> 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 <code>src/core/instance/render.js</code> 文件中：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">_render</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> VNode <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token literal-property property\\">vm</span><span class=\\"token operator\\">:</span> Component <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> render<span class=\\"token punctuation\\">,</span> _parentVnode <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> vm<span class=\\"token punctuation\\">.</span>$options\\n\\n  <span class=\\"token comment\\">// reset _rendered flag on slots for duplicate slot check</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> key <span class=\\"token keyword\\">in</span> vm<span class=\\"token punctuation\\">.</span>$slots<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// $flow-disable-line</span>\\n      vm<span class=\\"token punctuation\\">.</span>$slots<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>_rendered <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_parentVnode<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    vm<span class=\\"token punctuation\\">.</span>$scopedSlots <span class=\\"token operator\\">=</span> _parentVnode<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>scopedSlots <span class=\\"token operator\\">||</span> emptyObject\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// set parent vnode. this allows render functions to have access</span>\\n  <span class=\\"token comment\\">// to the data on the placeholder node.</span>\\n  vm<span class=\\"token punctuation\\">.</span>$vnode <span class=\\"token operator\\">=</span> _parentVnode\\n  <span class=\\"token comment\\">// render self</span>\\n  <span class=\\"token keyword\\">let</span> vnode\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>vm<span class=\\"token punctuation\\">.</span>_renderProxy<span class=\\"token punctuation\\">,</span> vm<span class=\\"token punctuation\\">.</span>$createElement<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">handleError</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span> vm<span class=\\"token punctuation\\">,</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">render</span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// return error render result,</span>\\n    <span class=\\"token comment\\">// or previous vnode to prevent render error causing blank component</span>\\n    <span class=\\"token comment\\">/* istanbul ignore else */</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>vm<span class=\\"token punctuation\\">.</span>$options<span class=\\"token punctuation\\">.</span>renderError<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n          vnode <span class=\\"token operator\\">=</span> vm<span class=\\"token punctuation\\">.</span>$options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">renderError</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>vm<span class=\\"token punctuation\\">.</span>_renderProxy<span class=\\"token punctuation\\">,</span> vm<span class=\\"token punctuation\\">.</span>$createElement<span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token function\\">handleError</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span> vm<span class=\\"token punctuation\\">,</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">renderError</span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">)</span>\\n          vnode <span class=\\"token operator\\">=</span> vm<span class=\\"token punctuation\\">.</span>_vnode\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        vnode <span class=\\"token operator\\">=</span> vm<span class=\\"token punctuation\\">.</span>_vnode\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      vnode <span class=\\"token operator\\">=</span> vm<span class=\\"token punctuation\\">.</span>_vnode\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// return empty vnode in case the render function errored out</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>vnode <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">VNode</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">warn</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token string\\">'Multiple root nodes returned from render function. Render function '</span> <span class=\\"token operator\\">+</span>\\n        <span class=\\"token string\\">'should return a single root node.'</span><span class=\\"token punctuation\\">,</span>\\n        vm\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createEmptyVNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// set parent</span>\\n  vnode<span class=\\"token punctuation\\">.</span>parent <span class=\\"token operator\\">=</span> _parentVnode\\n  <span class=\\"token keyword\\">return</span> vnode\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
