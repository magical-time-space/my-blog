import{_ as n,X as e,Y as s,a4 as a}from"./framework-d8252107.js";const c={},o=a(`<h1 id="类型守卫" tabindex="-1"><a class="header-anchor" href="#类型守卫" aria-hidden="true">#</a> 类型守卫</h1><h2 id="为什么-x-instanceof-foo-不能将-x-的类型缩小至-foo" tabindex="-1"><a class="header-anchor" href="#为什么-x-instanceof-foo-不能将-x-的类型缩小至-foo" aria-hidden="true">#</a> 为什么 <code>x instanceof Foo</code> 不能将 <code>x</code> 的类型缩小至 <code>Foo</code>？</h2><p>这取决于 <code>x</code> 是什么？如果 <code>x</code> 的类型不与 <code>Foo</code> 兼容，那么缩小 <code>x</code> 的类型就毫无意义，所以我们不会这么做。</p><p>当你发现 <code>x</code> 具有任何类型时，我们对此推荐的做法是：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">doIt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Assume &#39;x&#39; is a well-known object which</span>
    <span class="token comment">// we know how to handle specifically</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Treat &#39;x&#39; as a primitive</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你将在 TypeScript 中看到这些代码（它们可能早于联合类型被发现），或者是一些从 JavaScript 移植到 TypeScript 的代码，如果我们把 <code>x</code> 缩小至 <code>Object</code>，那么你将只能做更少的事情。使用任何不在 <code>Object</code> 中的属性都将导致错误。这不仅适用于 <code>Object</code>，对于具有已定义属性集的任何其他类型都是如此。</p>`,6),t=[o];function i(d,p){return e(),s("div",null,t)}const r=n(c,[["render",i],["__file","type-guards.html.vue"]]);export{r as default};
