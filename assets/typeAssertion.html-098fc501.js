const t=JSON.parse(`{"key":"v-3fb91af5","path":"/views/Books/Front-end/TypescriptMaster/typings/typeAssertion.html","title":"类型断言","lang":"zh-CN","frontmatter":{"description":"类型断言 TypeScript 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。 类型断言的一个常见用例是当你从 JavaScript 迁移到 TypeScript 时： const foo = {}; foo.bar = 123; // Error: 'bar' 属性不存在于 ‘{}’ foo.bas = 'hello'; // Error: 'bas' 属性不存在于 '{}'","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/typeAssertion.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"类型断言"}],["meta",{"property":"og:description","content":"类型断言 TypeScript 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。 类型断言的一个常见用例是当你从 JavaScript 迁移到 TypeScript 时： const foo = {}; foo.bar = 123; // Error: 'bar' 属性不存在于 ‘{}’ foo.bas = 'hello'; // Error: 'bas' 属性不存在于 '{}'"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型断言\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"as foo 与 <foo>","slug":"as-foo-与-foo","link":"#as-foo-与-foo","children":[]},{"level":2,"title":"类型断言与类型转换","slug":"类型断言与类型转换","link":"#类型断言与类型转换","children":[]},{"level":2,"title":"类型断言被认为是有害的","slug":"类型断言被认为是有害的","link":"#类型断言被认为是有害的","children":[]},{"level":2,"title":"双重断言","slug":"双重断言","link":"#双重断言","children":[{"level":3,"title":"TypeScript 是怎么确定单个断言是否足够","slug":"typescript-是怎么确定单个断言是否足够","link":"#typescript-是怎么确定单个断言是否足够","children":[]}]}],"git":{},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/typeAssertion.md","excerpt":"<h1> 类型断言</h1>\\n<p>TypeScript 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p>\\n<p>类型断言的一个常见用例是当你从 JavaScript 迁移到 TypeScript 时：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\nfoo<span class=\\"token punctuation\\">.</span>bar <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 'bar' 属性不存在于 ‘{}’</span>\\nfoo<span class=\\"token punctuation\\">.</span>bas <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 'bas' 属性不存在于 '{}'</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
