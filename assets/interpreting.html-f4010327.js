import{_ as e,X as t,Y as p,Z as n,a4 as o,$ as s}from"./framework-d8252107.js";const i={},c=o(`<h1 id="解读-errors" tabindex="-1"><a class="header-anchor" href="#解读-errors" aria-hidden="true">#</a> 解读 Errors</h1><p>TypeScript 是一种专注于帮助开发人员的编程语言，当错误出现时，它会提供尽可能提供非常有用的错误信息。这对于那些信任使用者的编译器来说，可能会导致轻微的信息量过载，而不会那么实用。</p><p>让我们来看一个在 IDE 中的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">SomethingComplex</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">takeSomethingComplex</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> SomethingComplex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;some bar&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 一个可能会出现的错误使用</span>
<span class="token keyword">const</span> fail <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  bar<span class="token operator">:</span> getBar
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">takeSomethingComplex</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在这里 TypeScript 会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个简单的例子，演示了一个常见的程序设计错误，它调用函数失败（<code>bar: getBar</code> 应该是 <code>bar: getBar()</code>）。幸运的是，一旦不符合类型要求，TypeScript 将会捕捉到这个错误。</p><h2 id="错误分类" tabindex="-1"><a class="header-anchor" href="#错误分类" aria-hidden="true">#</a> 错误分类</h2><p>TypeScript 错误信息分为两类：简洁和详细。</p><h3 id="简洁" tabindex="-1"><a class="header-anchor" href="#简洁" aria-hidden="true">#</a> 简洁</h3><p>简洁的错误信息是为了提供一个编译器描述的错误号以及一些相关的信息，一个简洁的错误信息类似于如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">TS2345</span><span class="token operator">:</span> Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，它没有提供更深层次的信息，如为什么这个错误会发生。这就是详细错误所需要的原因。</p><h2 id="详细" tabindex="-1"><a class="header-anchor" href="#详细" aria-hidden="true">#</a> 详细</h2><p>详细的错误信息类似于如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>ts<span class="token punctuation">]</span>
Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span>
  Types <span class="token keyword">of</span> property <span class="token string">&#39;bar&#39;</span> are incompatible<span class="token punctuation">.</span>
    Type <span class="token string">&#39;() =&gt; string&#39;</span> <span class="token keyword">is</span> not assignable to <span class="token keyword">type</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细的错误信息是为了指导使用者知道为什么一些错误（在这个例子里是类型不兼容）会发生。第一行与简洁的错误信息相同，后跟一些详细的信息。你应该阅读这些详细信息，因为对于开发者的一些疑问，它都给出了问答：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">ERROR</span><span class="token operator">:</span> Argument <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;{ foo: number; bar: () =&gt; string; }&#39;</span> <span class="token keyword">is</span> not assignable to parameter <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token string">&#39;SomethingComplex&#39;</span><span class="token punctuation">.</span>

<span class="token constant">WHY</span><span class="token operator">?</span>
<span class="token constant">CAUSE</span> <span class="token constant">ERROR</span><span class="token operator">:</span> Types <span class="token keyword">of</span> property <span class="token string">&#39;bar&#39;</span> are incompatible<span class="token punctuation">.</span>

<span class="token constant">WHY</span><span class="token operator">?</span>
<span class="token constant">CAUSE</span> <span class="token constant">ERROR</span><span class="token operator">:</span> Type <span class="token string">&#39;() =&gt; string&#39;</span> <span class="token keyword">is</span> not assignable to <span class="token keyword">type</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，最根本的原因是：</p><ul><li>在属性 <code>bar</code></li><li>函数 <code>() =&gt; string</code> 它应该是一个字符串。</li></ul><p>这能够帮助开发者修复 bar 属性的 bug（它们忘记了调用这个函数）。</p><h2 id="在-ide-中怎么提示" tabindex="-1"><a class="header-anchor" href="#在-ide-中怎么提示" aria-hidden="true">#</a> 在 IDE 中怎么提示</h2><p>IDE 通常会在详细的错误提示之后显示简洁版本，如下所示：</p>`,21),l=["src"],r=n("ul",null,[n("li",null,"你通常可能只会阅读「为什么」的详细信息；"),n("li",null,[s("当你想寻找相同的错误时（使用 "),n("code",null,"TSXXX"),s(" 错误编号，或者部分错误信息），使用简洁的版本。")])],-1);function d(a,u){return t(),p("div",null,[c,n("img",{src:a.$withBase("/ide.png"),alt:"ide"},null,8,l),r])}const m=e(i,[["render",d],["__file","interpreting.html.vue"]]);export{m as default};
