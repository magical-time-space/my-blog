const n=JSON.parse(`{"key":"v-17dbb674","path":"/views/Books/Front-end/JustVue2/extend/event.html","title":"event","lang":"zh-CN","frontmatter":{"description":"event 我们平时开发工作中，处理组件间的通讯，原生的交互，都离不开事件。对于一个组件元素，我们不仅仅可以绑定原生的 DOM 事件，还可以绑定自定义事件，非常灵活和方便。那么接下来我们从源码角度来看看它的实现原理。 为了更加直观，我们通过一个例子来分析它的实现： let Child = { template: '&lt;button @click=\\"clickHandler($event)\\"&gt;' + 'click me' + '&lt;/button&gt;', methods: { clickHandler(e) { console.log('Button clicked!', e) this.$emit('select') } } } let vm = new Vue({ el: '#app', template: '&lt;div&gt;' + '&lt;child @select=\\"selectHandler\\" @click.native.prevent=\\"clickHandler\\"&gt;&lt;/child&gt;' + '&lt;/div&gt;', methods: { clickHandler() { console.log('Child clicked!') }, selectHandler() { console.log('Child select!') } }, components: { Child } })","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/extend/event.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"event"}],["meta",{"property":"og:description","content":"event 我们平时开发工作中，处理组件间的通讯，原生的交互，都离不开事件。对于一个组件元素，我们不仅仅可以绑定原生的 DOM 事件，还可以绑定自定义事件，非常灵活和方便。那么接下来我们从源码角度来看看它的实现原理。 为了更加直观，我们通过一个例子来分析它的实现： let Child = { template: '&lt;button @click=\\"clickHandler($event)\\"&gt;' + 'click me' + '&lt;/button&gt;', methods: { clickHandler(e) { console.log('Button clicked!', e) this.$emit('select') } } } let vm = new Vue({ el: '#app', template: '&lt;div&gt;' + '&lt;child @select=\\"selectHandler\\" @click.native.prevent=\\"clickHandler\\"&gt;&lt;/child&gt;' + '&lt;/div&gt;', methods: { clickHandler() { console.log('Child clicked!') }, selectHandler() { console.log('Child select!') } }, components: { Child } })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"event\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":2,"title":"DOM 事件","slug":"dom-事件","link":"#dom-事件","children":[]},{"level":2,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":12.61,"words":3784},"filePathRelative":"views/Books/Front-end/JustVue2/extend/event.md","excerpt":"<h1> event</h1>\\n<p>我们平时开发工作中，处理组件间的通讯，原生的交互，都离不开事件。对于一个组件元素，我们不仅仅可以绑定原生的 DOM 事件，还可以绑定自定义事件，非常灵活和方便。那么接下来我们从源码角度来看看它的实现原理。</p>\\n<p>为了更加直观，我们通过一个例子来分析它的实现：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> Child <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'&lt;button @click=\\"clickHandler($event)\\"&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'click me'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;/button&gt;'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">clickHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Button clicked!'</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">$emit</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'select'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> vm <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Vue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">el</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'#app'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'&lt;div&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;child @select=\\"selectHandler\\" @click.native.prevent=\\"clickHandler\\"&gt;&lt;/child&gt;'</span> <span class=\\"token operator\\">+</span>\\n  <span class=\\"token string\\">'&lt;/div&gt;'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">methods</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">clickHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Child clicked!'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">selectHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Child select!'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">components</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    Child\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
