const e=JSON.parse(`{"key":"v-f7eeac1c","path":"/views/Books/Front-end/TypescriptMaster/typings/movingTypes.html","title":"流动的类型","lang":"zh-CN","frontmatter":{"description":"流动的类型 TypeScript 类型系统非常强大，它支持其他任何单一语言无法实现的类型流动和类型片段。 这是因为 TypeScript 的设计目的之一是让你无缝与像 JavaScript 这类高动态的语言一起工作。在这里，我们介绍一些在 TypeScript 中使用移动类型的技巧。 关键的动机：当你改变了其中一个时，其他相关的会自动更新，并且当有事情变糟糕时，你会得到一个友好的提示，就好像一个被精心设计过的约束系统。 复制类型和值 如果你想移动一个类，你可能会想要做以下事情： class Foo {} const Bar = Foo; let bar: Bar; // Error: 不能找到名称 'Bar'","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/movingTypes.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"流动的类型"}],["meta",{"property":"og:description","content":"流动的类型 TypeScript 类型系统非常强大，它支持其他任何单一语言无法实现的类型流动和类型片段。 这是因为 TypeScript 的设计目的之一是让你无缝与像 JavaScript 这类高动态的语言一起工作。在这里，我们介绍一些在 TypeScript 中使用移动类型的技巧。 关键的动机：当你改变了其中一个时，其他相关的会自动更新，并且当有事情变糟糕时，你会得到一个友好的提示，就好像一个被精心设计过的约束系统。 复制类型和值 如果你想移动一个类，你可能会想要做以下事情： class Foo {} const Bar = Foo; let bar: Bar; // Error: 不能找到名称 'Bar'"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流动的类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"复制类型和值","slug":"复制类型和值","link":"#复制类型和值","children":[]},{"level":2,"title":"捕获变量的类型","slug":"捕获变量的类型","link":"#捕获变量的类型","children":[]},{"level":2,"title":"捕获类成员的类型","slug":"捕获类成员的类型","link":"#捕获类成员的类型","children":[]},{"level":2,"title":"捕获字符串类型","slug":"捕获字符串类型","link":"#捕获字符串类型","children":[]},{"level":2,"title":"捕获键的名称","slug":"捕获键的名称","link":"#捕获键的名称","children":[]}],"git":{},"readingTime":{"minutes":2.35,"words":706},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/movingTypes.md","excerpt":"<h1> 流动的类型</h1>\\n<p>TypeScript 类型系统非常强大，它支持其他任何单一语言无法实现的类型流动和类型片段。</p>\\n<p>这是因为 TypeScript 的设计目的之一是让你无缝与像 JavaScript 这类高动态的语言一起工作。在这里，我们介绍一些在 TypeScript 中使用移动类型的技巧。</p>\\n<p>关键的动机：当你改变了其中一个时，其他相关的会自动更新，并且当有事情变糟糕时，你会得到一个友好的提示，就好像一个被精心设计过的约束系统。</p>\\n<h2> 复制类型和值</h2>\\n<p>如果你想移动一个类，你可能会想要做以下事情：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> Bar <span class=\\"token operator\\">=</span> Foo<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> bar<span class=\\"token operator\\">:</span> Bar<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 不能找到名称 'Bar'</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
