const n=JSON.parse('{"key":"v-3867e247","path":"/views/Books/Front-end/JustVue2/reactive/getters.html","title":"依赖收集","lang":"zh-CN","frontmatter":{"description":"依赖收集 通过上一节的分析我们了解 Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集，这一节我们来详细分析这个过程。 我们先来回顾一下 getter 部分的逻辑： export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean ) { const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property &amp;&amp; property.configurable === false) { return } // cater for pre-defined getter/setters const getter = property &amp;&amp; property.get const setter = property &amp;&amp; property.set if ((!getter || setter) &amp;&amp; arguments.length === 2) { val = obj[key] } let childOb = !shallow &amp;&amp; observe(val) Object.defineProperty(obj, key, { enumerable: true, configurable: true, get: function reactiveGetter () { const value = getter ? getter.call(obj) : val if (Dep.target) { dep.depend() if (childOb) { childOb.dep.depend() if (Array.isArray(value)) { dependArray(value) } } } return value }, // ... }) }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/reactive/getters.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"依赖收集"}],["meta",{"property":"og:description","content":"依赖收集 通过上一节的分析我们了解 Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集，这一节我们来详细分析这个过程。 我们先来回顾一下 getter 部分的逻辑： export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean ) { const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property &amp;&amp; property.configurable === false) { return } // cater for pre-defined getter/setters const getter = property &amp;&amp; property.get const setter = property &amp;&amp; property.set if ((!getter || setter) &amp;&amp; arguments.length === 2) { val = obj[key] } let childOb = !shallow &amp;&amp; observe(val) Object.defineProperty(obj, key, { enumerable: true, configurable: true, get: function reactiveGetter () { const value = getter ? getter.call(obj) : val if (Dep.target) { dep.depend() if (childOb) { childOb.dep.depend() if (Array.isArray(value)) { dependArray(value) } } } return value }, // ... }) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖收集\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"Dep","slug":"dep","link":"#dep","children":[]},{"level":2,"title":"Watcher","slug":"watcher","link":"#watcher","children":[]},{"level":2,"title":"过程分析","slug":"过程分析","link":"#过程分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":7.81,"words":2343},"filePathRelative":"views/Books/Front-end/JustVue2/reactive/getters.md","excerpt":"<h1> 依赖收集</h1>\\n<p>通过上一节的分析我们了解 Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集，这一节我们来详细分析这个过程。</p>\\n<p>我们先来回顾一下 getter 部分的逻辑：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">defineReactive</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token parameter\\"><span class=\\"token literal-property property\\">obj</span><span class=\\"token operator\\">:</span> Object<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> string<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">val</span><span class=\\"token operator\\">:</span> any<span class=\\"token punctuation\\">,</span>\\n  customSetter<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">?</span>Function<span class=\\"token punctuation\\">,</span>\\n  shallow<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> boolean</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> dep <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Dep</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">const</span> property <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwnPropertyDescriptor</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>configurable <span class=\\"token operator\\">===</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// cater for pre-defined getter/setters</span>\\n  <span class=\\"token keyword\\">const</span> getter <span class=\\"token operator\\">=</span> property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>get\\n  <span class=\\"token keyword\\">const</span> setter <span class=\\"token operator\\">=</span> property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>set\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>getter <span class=\\"token operator\\">||</span> setter<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> arguments<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    val <span class=\\"token operator\\">=</span> obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">let</span> childOb <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>shallow <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n  Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">defineProperty</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">enumerable</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">configurable</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">get</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reactiveGetter</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> value <span class=\\"token operator\\">=</span> getter <span class=\\"token operator\\">?</span> <span class=\\"token function\\">getter</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> val\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Dep<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        dep<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">depend</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>childOb<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          childOb<span class=\\"token punctuation\\">.</span>dep<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">depend</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">dependArray</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span> value\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// ...</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
