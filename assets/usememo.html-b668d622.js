const n=JSON.parse('{"key":"v-ce2b7c6c","path":"/views/Books/Front-end/JustReact/hooks/usememo.html","title":"","lang":"zh-CN","frontmatter":{"description":"在了解其他hook的实现后，理解useMemo与useCallback的实现非常容易。 本节我们以mount与update两种情况分别讨论这两个hook。 mount function mountMemo&lt;T&gt;( nextCreate: () =&gt; T, deps: Array&lt;mixed&gt; | void | null, ): T { // 创建并返回当前hook const hook = mountWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; // 计算value const nextValue = nextCreate(); // 将value与deps保存在hook.memoizedState hook.memoizedState = [nextValue, nextDeps]; return nextValue; } function mountCallback&lt;T&gt;(callback: T, deps: Array&lt;mixed&gt; | void | null): T { // 创建并返回当前hook const hook = mountWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; // 将value与deps保存在hook.memoizedState hook.memoizedState = [callback, nextDeps]; return callback; }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustReact/hooks/usememo.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:description","content":"在了解其他hook的实现后，理解useMemo与useCallback的实现非常容易。 本节我们以mount与update两种情况分别讨论这两个hook。 mount function mountMemo&lt;T&gt;( nextCreate: () =&gt; T, deps: Array&lt;mixed&gt; | void | null, ): T { // 创建并返回当前hook const hook = mountWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; // 计算value const nextValue = nextCreate(); // 将value与deps保存在hook.memoizedState hook.memoizedState = [nextValue, nextDeps]; return nextValue; } function mountCallback&lt;T&gt;(callback: T, deps: Array&lt;mixed&gt; | void | null): T { // 创建并返回当前hook const hook = mountWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; // 将value与deps保存在hook.memoizedState hook.memoizedState = [callback, nextDeps]; return callback; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"mount","slug":"mount","link":"#mount","children":[]},{"level":2,"title":"update","slug":"update","link":"#update","children":[]}],"git":{},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"views/Books/Front-end/JustReact/hooks/usememo.md","excerpt":"<p>在了解其他<code>hook</code>的实现后，理解<code>useMemo</code>与<code>useCallback</code>的实现非常容易。</p>\\n<p>本节我们以<code>mount</code>与<code>update</code>两种情况分别讨论这两个<code>hook</code>。</p>\\n<h2> mount</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> mountMemo<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token function-variable function\\">nextCreate</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">deps</span><span class=\\"token operator\\">:</span> Array<span class=\\"token operator\\">&lt;</span>mixed<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 创建并返回当前hook</span>\\n  <span class=\\"token keyword\\">const</span> hook <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mountWorkInProgressHook</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> nextDeps <span class=\\"token operator\\">=</span> deps <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span> deps<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 计算value</span>\\n  <span class=\\"token keyword\\">const</span> nextValue <span class=\\"token operator\\">=</span> <span class=\\"token function\\">nextCreate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 将value与deps保存在hook.memoizedState</span>\\n  hook<span class=\\"token punctuation\\">.</span>memoizedState <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>nextValue<span class=\\"token punctuation\\">,</span> nextDeps<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> nextValue<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> mountCallback<span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>callback<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">deps</span><span class=\\"token operator\\">:</span> Array<span class=\\"token operator\\">&lt;</span>mixed<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 创建并返回当前hook</span>\\n  <span class=\\"token keyword\\">const</span> hook <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mountWorkInProgressHook</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> nextDeps <span class=\\"token operator\\">=</span> deps <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span> deps<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 将value与deps保存在hook.memoizedState</span>\\n  hook<span class=\\"token punctuation\\">.</span>memoizedState <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>callback<span class=\\"token punctuation\\">,</span> nextDeps<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> callback<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
