const e=JSON.parse('{"key":"v-53d97350","path":"/views/Books/Front-end/JustReact/hooks/structure.html","title":"","lang":"zh-CN","frontmatter":{"description":"在上一节我们实现了一个极简的useState，了解了Hooks的运行原理。 本节我们讲解Hooks的数据结构，为后面介绍具体的hook打下基础。 dispatcher 在上一节的极简useState实现中，使用isMount变量区分mount与update。 在真实的Hooks中，组件mount时的hook与update时的hook来源于不同的对象，这类对象在源码中被称为dispatcher。","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustReact/hooks/structure.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:description","content":"在上一节我们实现了一个极简的useState，了解了Hooks的运行原理。 本节我们讲解Hooks的数据结构，为后面介绍具体的hook打下基础。 dispatcher 在上一节的极简useState实现中，使用isMount变量区分mount与update。 在真实的Hooks中，组件mount时的hook与update时的hook来源于不同的对象，这类对象在源码中被称为dispatcher。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"dispatcher","slug":"dispatcher","link":"#dispatcher","children":[]},{"level":2,"title":"一个dispatcher使用场景","slug":"一个dispatcher使用场景","link":"#一个dispatcher使用场景","children":[]},{"level":2,"title":"Hook的数据结构","slug":"hook的数据结构","link":"#hook的数据结构","children":[]},{"level":2,"title":"memoizedState","slug":"memoizedstate","link":"#memoizedstate","children":[]}],"git":{},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"views/Books/Front-end/JustReact/hooks/structure.md","excerpt":"<p>在上一节我们实现了一个极简的<code>useState</code>，了解了<code>Hooks</code>的运行原理。</p>\\n<p>本节我们讲解<code>Hooks</code>的数据结构，为后面介绍具体的<code>hook</code>打下基础。</p>\\n<h2> dispatcher</h2>\\n<p>在上一节的极简<code>useState</code>实现中，使用<code>isMount</code>变量区分<code>mount</code>与<code>update</code>。</p>\\n<p>在真实的<code>Hooks</code>中，组件<code>mount</code>时的<code>hook</code>与<code>update</code>时的<code>hook</code>来源于不同的对象，这类对象在源码中被称为<code>dispatcher</code>。</p>","autoDesc":true}');export{e as data};
