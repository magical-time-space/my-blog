const e=JSON.parse('{"key":"v-03bf15a8","path":"/views/Books/Front-end/JustVue2/components/lifecycle.html","title":"生命周期","lang":"zh-CN","frontmatter":{"description":"生命周期 每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。 在我们实际项目开发过程中，会非常频繁地和 Vue 组件的生命周期打交道，接下来我们就从源码的角度来看一下这些生命周期的钩子函数是如何被执行的。 源码中最终执行生命周期的函数都是调用 callHook 方法，它的定义在 src/core/instance/lifecycle 中：","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/components/lifecycle.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"生命周期"}],["meta",{"property":"og:description","content":"生命周期 每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。 在我们实际项目开发过程中，会非常频繁地和 Vue 组件的生命周期打交道，接下来我们就从源码的角度来看一下这些生命周期的钩子函数是如何被执行的。 源码中最终执行生命周期的函数都是调用 callHook 方法，它的定义在 src/core/instance/lifecycle 中："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"beforeCreate & created","slug":"beforecreate-created","link":"#beforecreate-created","children":[]},{"level":2,"title":"beforeMount & mounted","slug":"beforemount-mounted","link":"#beforemount-mounted","children":[]},{"level":2,"title":"beforeUpdate & updated","slug":"beforeupdate-updated","link":"#beforeupdate-updated","children":[]},{"level":2,"title":"beforeDestroy & destroyed","slug":"beforedestroy-destroyed","link":"#beforedestroy-destroyed","children":[]},{"level":2,"title":"activated & deactivated","slug":"activated-deactivated","link":"#activated-deactivated","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":7.51,"words":2252},"filePathRelative":"views/Books/Front-end/JustVue2/components/lifecycle.md","excerpt":"<h1> 生命周期</h1>\\n<p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。</p>\\n\\n<p>在我们实际项目开发过程中，会非常频繁地和 Vue 组件的生命周期打交道，接下来我们就从源码的角度来看一下这些生命周期的钩子函数是如何被执行的。</p>\\n<p>源码中最终执行生命周期的函数都是调用 <code>callHook</code> 方法，它的定义在 <code>src/core/instance/lifecycle</code> 中：</p>","autoDesc":true}');export{e as data};
