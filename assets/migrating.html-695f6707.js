import{_ as p,X as c,Y as o,Z as s,$ as n,a0 as e,a4 as t,E as i}from"./framework-d8252107.js";const r={},l=t(`<h1 id="从-javascript-迁移" tabindex="-1"><a class="header-anchor" href="#从-javascript-迁移" aria-hidden="true">#</a> 从 JavaScript 迁移</h1><p>首先，假设如下：</p><ul><li>你了解 JavaScript；</li><li>你了解在项目中常用的方式和构建工具（如：webpack）。</li></ul><p>有了以上假设，一般来说，将 JavaScript 代码迁移至 TypeScript 包括以下步骤：</p><ul><li>添加一个 <code>tsconfig.json</code> 文件；</li><li>把文件扩展名从 <code>.js</code> 改成 <code>.ts</code>，开始使用 <code>any</code> 来减少错误；</li><li>开始在 TypeScript 中写代码，尽可能的减少 <code>any</code> 的使用；</li><li>回到旧代码，开始添加类型注解，并修复已识别的错误；</li><li>为第三方 JavaScript 代码定义环境声明。</li></ul><p>让我们进一步讨论其中的几个关键点。</p><p>记住：所有的 JavaScript 代码都是有效的 TypeScript 代码。这意味着，如果让 TypeScript 编译器编译 TypeScript 里的 JavaScript 代码，编译后的结果将会与原始的 JavaScript 代码一模一样。也就是说，把文件扩展名从 <code>.js</code> 改成 <code>.ts</code> 将不会造成任何负面的影响。</p><h2 id="减少错误" tabindex="-1"><a class="header-anchor" href="#减少错误" aria-hidden="true">#</a> 减少错误</h2><p>代码被迁移至 TypeScript 后，TypeScript 将会立即对你的代码进行类型检查，你的 JavaScript 代码可能并不像想象中那样整齐了，因此你可能会收到一些报错信息。这时，可以使用 <code>any</code> 来解决大部分的报错问题：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>

bar <span class="token operator">=</span> foo<span class="token punctuation">;</span> <span class="token comment">// Error: 不能把 number 类型赋值给 string 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这些错误是有效的，并且在大多数情况下，根据这些错误所推断出的信息比代码库的不同部分的原始作者想象的更好，但是你的重点是在逐步更新旧代码库的同时，用 TypeScript 编写新代码。在这里，你可以使用类型断言来减少此错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>

bar <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从另一方面来说，你可能想用 <code>any</code> 用作类型注解：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 不能把一个 number 类型赋值给 string 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>减少这种错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
  <span class="token comment">// 添加 &#39;any&#39;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;hey&#39;</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">NOTICE</p><p>使用此种方式来减少错误是危险的，但是它允许你将注意力转移到你的新 TypeScript 代码错误上。当你进行下一步前，最好要留下 <code>// TODO</code> 的注释。</p></div><h2 id="第三方代码" tabindex="-1"><a class="header-anchor" href="#第三方代码" aria-hidden="true">#</a> 第三方代码</h2><p>你可以将你的 JavaScript 代码改成 TypeScript 代码，但是你不能让整个世界都使用 TypeScript。这正是 TypeScript 环境声明支持的地方。我建议你以创建一个 <code>vendor.d.ts</code> 文件作为开始（<code>.d.ts</code> 文件扩展名指定这个文件是一个声明文件），然后我向文件里添加东西。或者，你也可以创建一个针对于特定库的声明文件，如为 jquery 创建 <code>jquery.d.ts</code> 文件。</p>`,19),d={class:"hint-container tip"},u=s("p",{class:"hint-container-title"},"NOTICE",-1),k={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>根据 <code>jquery</code> 的使用，你可以非常简单快速的为它创建一个定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有时，你可能想在某些内容（如 <code>jQuery</code>）上添加显式的注解，并且你会在类型声明空间中使用它。你可以通过 <code>type</code> 关键字快速的实现它：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">JQuery</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> $<span class="token operator">:</span> JQuery<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这提供给你一个更清晰的使用模式。</p>`,5),y=s("code",null,"jquery.d.ts",-1),m={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"第三方的-npm-模块",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第三方的-npm-模块","aria-hidden":"true"},"#"),n(" 第三方的 NPM 模块")],-1),h=s("code",null,"jquery",-1),g={href:"https://www.npmjs.com/package/jquery",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就可以在必要时导入它：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),f={class:"hint-container tip"},w=s("p",{class:"hint-container-title"},"提示",-1),S=s("code",null,"jquery.d.ts",-1),T={href:"https://github.com/borisyankov/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="额外的非-javascript-资源" tabindex="-1"><a class="header-anchor" href="#额外的非-javascript-资源" aria-hidden="true">#</a> 额外的非 JavaScript 资源</h2><p>在 TypeScript 中，甚至可以允许你导入任何文件，例如 <code>.css</code> 文件（如果你使用的是 webpack 样式加载器或 css 模块），你只要添加如下代码（放在 <code>global.d.ts</code>）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.css&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在你可以使用 <code>import * as foo from &#39;./some/file.css&#39;</code>。</p><p>与此相似，如果你想使用 html 模版（例如：angular），你可以：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.html&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function j(J,q){const a=i("ExternalLinkIcon");return c(),o("div",null,[l,s("div",d,[u,s("p",null,[n("几乎排名前 90% 的 JavaScript 库的声明文件存在于 "),s("a",k,[n("DefinitelyTyped"),e(a)]),n(" 仓库里，在创建自己定义的声明文件之前，我们建议你先去仓库中寻找是否有对应的声明文件。尽管如此，创建一个声明文件这种快速但不好的方式是减小使用 TypeScript 初始阻力的重要步骤")])]),v,s("p",null,[n("一个高质量的 "),y,n(" 已经在 "),s("a",m,[n("DefinitelyTyped"),e(a)]),n(" 中存在。现在你已经知道如何在使用第三方 JavaScript 模块时，快速克服从 JavaScript 至 TypeScript 的阻力了。在接下去的章节，我们将会讨论环境声明。")]),b,s("p",null,[n("与全局变量声明相似，你可以快速的定义一个全局模块，如：对于 "),h,n("，如果你想把它作为一个模块来使用（"),s("a",g,[n("NPM"),e(a)]),n("），可以自己通过以下方式实现：")]),_,s("div",f,[w,s("p",null,[n("再一次说明，一个高质量的 "),S,n(" 已经在 "),s("a",T,[n("DefinitelyTyped"),e(a)]),n(" 中存在，但是可能在你的包里没有，那么，你现在有一个简单快速的方式来继续迁移。")])]),x])}const N=p(r,[["render",j],["__file","migrating.html.vue"]]);export{N as default};
