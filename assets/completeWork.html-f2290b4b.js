import{_ as r,X as i,Y as d,Z as s,$ as n,a0 as e,a5 as c,a4 as a,E as p}from"./framework-d8252107.js";const u={},k=a('<p>在<a href="/process/reconciler">流程概览一节</a>我们了解组件在<code>render阶段</code>会经历<code>beginWork</code>与<code>completeWork</code>。</p><p>上一节我们讲解了组件执行<code>beginWork</code>后会创建<code>子Fiber节点</code>，节点上可能存在<code>effectTag</code>。</p><p>这一节让我们看看<code>completeWork</code>会做什么工作。</p>',3),m={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L673",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"completeWork",-1),b=a(`<h2 id="流程概览" tabindex="-1"><a class="header-anchor" href="#流程概览" aria-hidden="true">#</a> 流程概览</h2><p>类似<code>beginWork</code>，<code>completeWork</code>也是针对不同<code>fiber.tag</code>调用不同的处理逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">IndeterminateComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">LazyComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">SimpleMemoComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ForwardRef</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Mode</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Profiler</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ContextConsumer</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">MemoComponent</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...省略</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...省略</span>
      <span class="token function">updateHostContainer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...省略</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// ...省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们重点关注页面渲染所必须的<code>HostComponent</code>（即原生<code>DOM组件</code>对应的<code>Fiber节点</code>），其他类型<code>Fiber</code>的处理留在具体功能实现时讲解。</p><h2 id="处理hostcomponent" tabindex="-1"><a class="header-anchor" href="#处理hostcomponent" aria-hidden="true">#</a> 处理HostComponent</h2><p>和<code>beginWork</code>一样，我们根据<code>current === null ?</code>判断是<code>mount</code>还是<code>update</code>。</p><p>同时针对<code>HostComponent</code>，判断<code>update</code>时我们还需要考虑<code>workInProgress.stateNode != null ?</code>（即该<code>Fiber节点</code>是否存在对应的<code>DOM节点</code>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">popHostContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> rootContainerInstance <span class="token operator">=</span> <span class="token function">getRootHostContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// update的情况</span>
    <span class="token comment">// ...省略</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// mount的情况</span>
    <span class="token comment">// ...省略</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update时" tabindex="-1"><a class="header-anchor" href="#update时" aria-hidden="true">#</a> update时</h2><p>当<code>update</code>时，<code>Fiber节点</code>已经存在对应<code>DOM节点</code>，所以不需要生成<code>DOM节点</code>。需要做的主要是处理<code>props</code>，比如：</p><ul><li><code>onClick</code>、<code>onChange</code>等回调函数的注册</li><li>处理<code>style prop</code></li><li>处理<code>DANGEROUSLY_SET_INNER_HTML prop</code></li><li>处理<code>children prop</code></li></ul><p>我们去掉一些当前不需要关注的功能（比如<code>ref</code>）。可以看到最主要的逻辑是调用<code>updateHostComponent</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// update的情况</span>
  <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>
    current<span class="token punctuation">,</span>
    workInProgress<span class="token punctuation">,</span>
    type<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    rootContainerInstance<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),f={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L225",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"updateHostComponent",-1),y=a(`<p>在<code>updateHostComponent</code>内部，被处理完的<code>props</code>会被赋值给<code>workInProgress.updateQueue</code>，并最终会在<code>commit阶段</code>被渲染在页面上。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">(</span>updatePayload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>updatePayload</code>为数组形式，他的偶数索引的值为变化的<code>prop key</code>，奇数索引的值为变化的<code>prop value</code>。</p>`,3),g={class:"hint-container details"},_=a("<summary>updatePayload属性 Demo</summary><p><code>updateHostComponent</code>方法内打印了<code>Fiber节点</code>对应的<code>type</code>与<code>updatePayload</code>。</p><p>你可以直观的感受<code>updatePayload</code>的数据结构</p>",3),w=s("strong",null,"431",-1),C=a(`<h2 id="mount时" tabindex="-1"><a class="header-anchor" href="#mount时" aria-hidden="true">#</a> mount时</h2><p>同样，我们省略了不相关的逻辑。可以看到，<code>mount</code>时的主要逻辑包括三个：</p><ul><li>为<code>Fiber节点</code>生成对应的<code>DOM节点</code></li><li>将子孙<code>DOM节点</code>插入刚生成的<code>DOM节点</code>中</li><li>与<code>update</code>逻辑中的<code>updateHostComponent</code>类似的处理<code>props</code>的过程</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// mount的情况</span>

<span class="token comment">// ...省略服务端渲染相关逻辑</span>

<span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 为fiber创建对应DOM节点</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>
    type<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    rootContainerInstance<span class="token punctuation">,</span>
    currentHostContext<span class="token punctuation">,</span>
    workInProgress<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将子孙DOM节点插入刚生成的DOM节点中</span>
<span class="token function">appendAllChildren</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// DOM节点赋值给fiber.stateNode</span>
workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>

<span class="token comment">// 与update逻辑中的updateHostComponent类似的处理props的过程</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
  <span class="token function">finalizeInitialChildren</span><span class="token punctuation">(</span>
    instance<span class="token punctuation">,</span>
    type<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    rootContainerInstance<span class="token punctuation">,</span>
    currentHostContext<span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),F=s("code",null,"mount",-1),P=s("code",null,"rootFiber",-1),x=s("code",null,"Placement effectTag",-1),I=s("code",null,"commit阶段",-1),W=s("code",null,"DOM",-1),j=s("code",null,"Placement effectTag",-1),D=s("code",null,"DOM树",-1),H=a(`<p>原因就在于<code>completeWork</code>中的<code>appendAllChildren</code>方法。</p><p>由于<code>completeWork</code>属于“归”阶段调用的函数，每次调用<code>appendAllChildren</code>时都会将已生成的子孙<code>DOM节点</code>插入当前生成的<code>DOM节点</code>下。那么当“归”到<code>rootFiber</code>时，我们已经有一个构建好的离屏<code>DOM树</code>。</p><h2 id="effectlist" tabindex="-1"><a class="header-anchor" href="#effectlist" aria-hidden="true">#</a> effectList</h2><p>至此<code>render阶段</code>的绝大部分工作就完成了。</p><p>还有一个问题：作为<code>DOM</code>操作的依据，<code>commit阶段</code>需要找到所有有<code>effectTag</code>的<code>Fiber节点</code>并依次执行<code>effectTag</code>对应操作。难道需要在<code>commit阶段</code>再遍历一次<code>Fiber树</code>寻找<code>effectTag !== null</code>的<code>Fiber节点</code>么？</p><p>这显然是很低效的。</p><p>为了解决这个问题，在<code>completeWork</code>的上层函数<code>completeUnitOfWork</code>中，每个执行完<code>completeWork</code>且存在<code>effectTag</code>的<code>Fiber节点</code>会被保存在一条被称为<code>effectList</code>的单向链表中。</p><p><code>effectList</code>中第一个<code>Fiber节点</code>保存在<code>fiber.firstEffect</code>，最后一个元素保存在<code>fiber.lastEffect</code>。</p><p>类似<code>appendAllChildren</code>，在“归”阶段，所有有<code>effectTag</code>的<code>Fiber节点</code>都会被追加在<code>effectList</code>中，最终形成一条以<code>rootFiber.firstEffect</code>为起点的单向链表。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>                       nextEffect         nextEffect
rootFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> fiber <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> fiber
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在<code>commit阶段</code>只需要遍历<code>effectList</code>就能执行所有<code>effect</code>了。</p>`,11),L={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1744",target:"_blank",rel:"noopener noreferrer"},M=a(`<p>借用<code>React</code>团队成员<strong>Dan Abramov</strong>的话：<code>effectList</code>相较于<code>Fiber树</code>，就像圣诞树上挂的那一串彩灯。</p><h2 id="流程结尾" tabindex="-1"><a class="header-anchor" href="#流程结尾" aria-hidden="true">#</a> 流程结尾</h2><p>至此，<code>render阶段</code>全部工作完成。在<code>performSyncWorkOnRoot</code>函数中<code>fiberRootNode</code>被传递给<code>commitRoot</code>方法，开启<code>commit阶段</code>工作流程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),O={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1107",target:"_blank",rel:"noopener noreferrer"},R=s("h2",{id:"参考资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),n(" 参考资料")],-1),E=s("p",null,[s("code",null,"completeWork"),n("流程图")],-1),N=["src"];function T(l,B){const o=p("ExternalLinkIcon"),t=p("RouterLink");return i(),d("div",null,[k,s("p",null,[n("你可以从"),s("a",m,[n("这里"),e(o)]),n("看到"),v,n("方法定义。")]),b,s("p",null,[n("你可以从"),s("a",f,[n("这里"),e(o)]),n("看到"),h,n("方法定义。")]),y,s("blockquote",null,[s("p",null,[n("具体渲染过程见"),e(t,{to:"/views/Books/Front-end/JustReact/renderer/mutation.html#hostcomponent-mutation"},{default:c(()=>[n("mutation阶段一节")]),_:1})])]),s("details",g,[_,s("p",null,[e(t,{to:"/views/Books/Front-end/JustReact/me.html"},{default:c(()=>[n("关注公众号")]),_:1}),n("，后台回复"),w,n("获得在线Demo地址")])]),C,s("p",null,[n("还记得"),e(t,{to:"/views/Books/Front-end/JustReact/process/beginWork.html#effecttag"},{default:c(()=>[n("上一节")]),_:1}),n("我们讲到："),F,n("时只会在"),P,n("存在"),x,n("。那么"),I,n("是如何通过一次插入"),W,n("操作（对应一个"),j,n("）将整棵"),D,n("插入页面的呢？")]),H,s("p",null,[n("你可以在"),s("a",L,[n("这里"),e(o)]),n("看到这段代码逻辑。")]),M,s("p",null,[n("代码见"),s("a",O,[n("这里"),e(o)]),n("。")]),R,E,s("img",{src:l.$withBase("/img/completeWork.png"),alt:"completeWork流程图"},null,8,N)])}const S=r(u,[["render",T],["__file","completeWork.html.vue"]]);export{S as default};
