const n=JSON.parse(`{"key":"v-fc7e4590","path":"/views/Books/Front-end/TypescriptMaster/tips/typesafeEventEmitter.html","title":"类型安全的 Event Emitter","lang":"zh-CN","frontmatter":{"description":"类型安全的 Event Emitter 通常来说，在 Node.js 与传统的 JavaScript 里，你有一个单一的 Event Emitter，你可以用它来为不同的事件添加监听器。 const emitter = new EventEmitter(); // Emit emitter.emit('foo', foo); emitter.emit('bar', bar); // Listen emitter.on('foo', foo =&gt; console.log(foo)); emitter.on('bar', bar =&gt; console.log(bar));","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/tips/typesafeEventEmitter.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"类型安全的 Event Emitter"}],["meta",{"property":"og:description","content":"类型安全的 Event Emitter 通常来说，在 Node.js 与传统的 JavaScript 里，你有一个单一的 Event Emitter，你可以用它来为不同的事件添加监听器。 const emitter = new EventEmitter(); // Emit emitter.emit('foo', foo); emitter.emit('bar', bar); // Listen emitter.on('foo', foo =&gt; console.log(foo)); emitter.on('bar', bar =&gt; console.log(bar));"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型安全的 Event Emitter\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"参考 TypedEvent","slug":"参考-typedevent","link":"#参考-typedevent","children":[]}],"git":{},"readingTime":{"minutes":0.91,"words":273},"filePathRelative":"views/Books/Front-end/TypescriptMaster/tips/typesafeEventEmitter.md","excerpt":"<h1> 类型安全的 Event Emitter</h1>\\n<p>通常来说，在 Node.js 与传统的 JavaScript 里，你有一个单一的 Event Emitter，你可以用它来为不同的事件添加监听器。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> emitter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">EventEmitter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Emit</span>\\nemitter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emit</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nemitter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emit</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">,</span> bar<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Listen</span>\\nemitter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> foo <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nemitter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">,</span> bar <span class=\\"token operator\\">=&gt;</span> <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>bar<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
