import{_ as c,X as o,Y as t,Z as a,$ as e,a0 as d,a4 as s,E as p}from"./framework-d8252107.js";const i={},r=s(`<h1 id="谨慎使用-outfile" tabindex="-1"><a class="header-anchor" href="#谨慎使用-outfile" aria-hidden="true">#</a> 谨慎使用 <code>--outFile</code></h1><p>由于以下几点原因，你应该谨慎使用 <code>--outFile</code> 选项：</p><ul><li>运行时的错误；</li><li>快速编译；</li><li>全局作用域；</li><li>难以分析；</li><li>难以扩展；</li><li><code>_references</code>；</li><li>代码重用；</li><li>多目标；</li><li>单独编译；</li></ul><h2 id="运行时的错误" tabindex="-1"><a class="header-anchor" href="#运行时的错误" aria-hidden="true">#</a> 运行时的错误</h2><p>如果你的代码依赖于上文中的 JavaScript，你可能会在运行时得到错误：</p><ul><li>类的继承在运行时中断。</li></ul><p>有如下 <code>foo.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以及 <code>bar.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你没有按正确的顺序编译它（例如：<code>tsc bar.ts foo.ts</code>），虽然它能够被编译成功，但是会在运行时抛出 <code>ReferenceError</code> 的错误。</p><ul><li>模块拆分在运行时会失败。</li></ul><p><code>foo.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> App <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bar.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> App <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> foo <span class="token operator">+</span> <span class="token number">456</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与上文中一致，当你没有用正确的顺序编译它，它会在运行时将 <code>NaN</code> 赋值给 <code>bar</code>；</p><h2 id="快速编译" tabindex="-1"><a class="header-anchor" href="#快速编译" aria-hidden="true">#</a> 快速编译</h2><p>如果你使用 <code>--out</code> 编译选项，而没有使用一些 <code>hacks</code> 时，单独的 <code>.ts</code> 文件是不会被编译成单独的 <code>.js</code> 文件。 <code>--out</code> 选项实际上使用了较慢的构建方式。</p><p>此外，由于 source map 基于长度编码，且对位置信息敏感，因此，大部分 source map 都会在编译时重新构建（如果你使用 source map）。</p><h2 id="全局作用域" tabindex="-1"><a class="header-anchor" href="#全局作用域" aria-hidden="true">#</a> 全局作用域</h2><p>当然，你可以使用命名空间，但是它仍然在 <code>window</code> 上（如果你在浏览器中打开），命名空间仅仅是一个临时的解决方式。<code>///&lt;reference</code> 也不例外，它会引入一个难以维护的全局上下文。</p><p>如果你的公司有多个独立工作的团队，当有人决定尝试集成两个程序编写 app 时，则很可能存在命名冲突。</p><h2 id="难以分析" tabindex="-1"><a class="header-anchor" href="#难以分析" aria-hidden="true">#</a> 难以分析</h2><p>我们希望提供更多代码分析工具。如果你提供调用链的依赖关系，这些将会变得简单。</p><h2 id="难以扩展" tabindex="-1"><a class="header-anchor" href="#难以扩展" aria-hidden="true">#</a> 难以扩展</h2><p>实际上这是运行时的随机错误 + 编译时间时间慢 + 难以理解的代码的结果。</p><h2 id="references-ts" tabindex="-1"><a class="header-anchor" href="#references-ts" aria-hidden="true">#</a> <code>_references.ts</code></h2>`,28),l=a("code",null,"tsconfig.json",-1),u={href:"https://github.com/Microsoft/TypeScript/issues/2472#issuecomment-85330803",target:"_blank",rel:"noopener noreferrer"},h=s(`<h2 id="代码重用" tabindex="-1"><a class="header-anchor" href="#代码重用" aria-hidden="true">#</a> 代码重用</h2><p>如果你想在另一个项目中重用存在隐式依赖关系的代码，如果没有错误提示，很难移植它。</p><h2 id="多目标" tabindex="-1"><a class="header-anchor" href="#多目标" aria-hidden="true">#</a> 多目标</h2><p>如果你想在 nodejs 之类的环境下重用在浏览器中的代码（如：testing APIS），你将不得不将其转换到新的模块系统或者使用不好的 <code>hacks</code>，让 nodejs 的 <code>global</code> 成为你的新的全局变量（如：<code>window</code>）。</p><h2 id="单独编译" tabindex="-1"><a class="header-anchor" href="#单独编译" aria-hidden="true">#</a> 单独编译</h2><p>文件无法被单独编译，如 <code>a.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> s <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据不同的 <code>b.ts</code> 的形式，它将有不同的输出：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> <span class="token constant">M</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此 <code>a.ts</code> 不能被单独编译;</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>--out</code> 做的是一些构建工具的工作，这些构建工具也可以受益于外部模块所提供的依赖，因此如果你愿意，我们推荐你使用外部模块，让构建工具创建单文件的 <code>.js</code>。</p>`,14);function k(v,m){const n=p("ExternalLinkIcon");return o(),t("div",null,[r,a("p",null,[e("它并没有被 "),l,e(" 支持："),a("a",u,[e("Comment"),d(n)]),e("，你需要手动对文件排序。")]),h])}const f=c(i,[["render",k],["__file","outFileCaution.html.vue"]]);export{f as default};
