import{_ as t,X as c,Y as i,Z as e,$ as a,a0 as s,a4 as r,E as d}from"./framework-d8252107.js";const o={},l=r(`<p>经过之前的学习，我们已经知道<code>React16</code>的架构分为三层：</p><ul><li>Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入<strong>Reconciler</strong></li><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</li></ul><p>那么架构是如何体现在源码的文件结构上呢，让我们一起看看吧。</p><h2 id="顶层目录" tabindex="-1"><a class="header-anchor" href="#顶层目录" aria-hidden="true">#</a> 顶层目录</h2><p>除去配置文件和隐藏文件夹，根目录的文件夹包括三个：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>根目录
├── fixtures        # 包含一些给贡献者准备的小型 React 测试项目
├── packages        # 包含元数据（比如 package.json）和 React 仓库中所有 package 的源码（子目录 src）
├── scripts         # 各种工具链的脚本，比如git、jest、eslint等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们关注<strong>packages</strong>目录</p><h2 id="packages目录" tabindex="-1"><a class="header-anchor" href="#packages目录" aria-hidden="true">#</a> packages目录</h2><p>目录下的文件夹非常多，我们来看下：</p>`,9),h={id:"react文件夹",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#react文件夹","aria-hidden":"true"},"#",-1),u={href:"https://github.com/facebook/react/tree/master/packages/react",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"React的核心，包含所有全局 React API，如：",-1),v=e("ul",null,[e("li",null,"React.createElement"),e("li",null,"React.Component"),e("li",null,"React.Children")],-1),b=e("code",null,"ReactDOM",-1),m=e("code",null,"ReactNative",-1),g={href:"https://www.npmjs.com/package/react",target:"_blank",rel:"noopener noreferrer"},k={id:"scheduler文件夹",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#scheduler文件夹","aria-hidden":"true"},"#",-1),x={href:"https://github.com/facebook/react/tree/master/packages/scheduler",target:"_blank",rel:"noopener noreferrer"},R=e("p",null,"Scheduler（调度器）的实现。",-1),E={id:"shared文件夹",tabindex:"-1"},S=e("a",{class:"header-anchor",href:"#shared文件夹","aria-hidden":"true"},"#",-1),T={href:"https://github.com/facebook/react/tree/master/packages/shared",target:"_blank",rel:"noopener noreferrer"},w=e("strong",null,"方法",-1),j=e("strong",null,"全局变量",-1),y={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/shared/ReactSymbols.js",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"React",-1),A=r(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_ELEMENT_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeac7</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_PORTAL_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeaca</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token operator">=</span> <span class="token number">0xeacb</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="renderer相关的文件夹" tabindex="-1"><a class="header-anchor" href="#renderer相关的文件夹" aria-hidden="true">#</a> Renderer相关的文件夹</h3><p>如下几个文件夹为对应的<strong>Renderer</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-art
- react-dom                 # 注意这同时是DOM和SSR（服务端渲染）的入口
- react-native-renderer
- react-noop-renderer       # 用于debug fiber（后面会介绍fiber）
- react-test-renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="试验性包的文件夹" tabindex="-1"><a class="header-anchor" href="#试验性包的文件夹" aria-hidden="true">#</a> 试验性包的文件夹</h3><p><code>React</code>将自己流程中的一部分抽离出来，形成可以独立使用的包，由于他们是试验性质的，所以不被建议在生产环境使用。包括如下文件夹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-server        # 创建自定义SSR流
- react-client        # 创建自定义的流
- react-fetch         # 用于数据请求
- react-interactions  # 用于测试交互相关的内部特性，比如React的事件模型
- react-reconciler    # Reconciler的实现，你可以用他构建自己的Renderer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="辅助包的文件夹" tabindex="-1"><a class="header-anchor" href="#辅助包的文件夹" aria-hidden="true">#</a> 辅助包的文件夹</h3><p><code>React</code>将一些辅助功能形成单独的包。包括如下文件夹：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- react-is       # 用于测试组件是否是某类型
- react-client   # 创建自定义的流
- react-fetch    # 用于数据请求
- react-refresh  # “热重载”的React官方实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),P={id:"react-reconciler文件夹",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#react-reconciler文件夹","aria-hidden":"true"},"#",-1),M={href:"https://github.com/facebook/react/tree/master/packages/react-reconciler",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,[a("我们需要重点关注"),e("strong",null,"react-reconciler"),a("，在接下来源码学习中 80%的代码量都来自这个包。")],-1),L=e("p",null,[a("虽然他是一个实验性的包，内部的很多功能在正式版本中还未开放。但是他一边对接"),e("strong",null,"Scheduler"),a("，一边对接不同平台的"),e("strong",null,"Renderer"),a("，构成了整个 React16 的架构体系。")],-1);function V(Y,B){const n=d("ExternalLinkIcon");return c(),i("div",null,[l,e("h3",h,[p,a(),e("a",u,[a("react"),s(n)]),a("文件夹")]),_,v,e("p",null,[a("这些 API 是全平台通用的，它不包含"),b,a("、"),m,a("等平台特定的代码。在 NPM 上作为"),e("a",g,[a("单独的一个包"),s(n)]),a("发布。")]),e("h3",k,[f,a(),e("a",x,[a("scheduler"),s(n)]),a("文件夹")]),R,e("h3",E,[S,a(),e("a",T,[a("shared"),s(n)]),a("文件夹")]),e("p",null,[a("源码中其他模块公用的"),w,a("和"),j,a("，比如在"),e("a",y,[a("shared/ReactSymbols.js"),s(n)]),a("中保存"),N,a("不同组件类型的定义。")]),A,e("h3",P,[C,a(),e("a",M,[a("react-reconciler"),s(n)]),a("文件夹")]),I,L])}const D=t(o,[["render",V],["__file","file.html.vue"]]);export{D as default};
