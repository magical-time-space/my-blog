import{_ as n,X as s,Y as a,a4 as e}from"./framework-d8252107.js";const t={},p=e(`<h1 id="减少-setter-属性的使用" tabindex="-1"><a class="header-anchor" href="#减少-setter-属性的使用" aria-hidden="true">#</a> 减少 setter 属性的使用</h1><p>倾向于使用更精确的 <code>set/get</code> 函数（如 <code>setBar</code>, <code>getBar</code>），减少使用 <code>setter/getter</code>；</p><p>考虑以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">456</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在 <code>setter/getter</code> 时：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">bar</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> value<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> value<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并不是 <code>setter</code> 的一个好的使用场景，当开发人员阅读第一段代码时，不知道将要更改的所有内容的上下文。然而，当开发者使用 <code>foo.setBar(value)</code>，他可能会意识到在 <code>foo</code> 里可能会引起一些改变。</p>`,7),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","limitPropertySetters.html.vue"]]);export{u as default};
