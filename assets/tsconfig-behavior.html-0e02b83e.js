import{_ as e,X as o,Y as c,a4 as d}from"./framework-d8252107.js";const t={},i=d('<h1 id="tsconfig-json-的行为" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-的行为" aria-hidden="true">#</a> <code>tsconfig.json</code> 的行为</h1><h2 id="为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中" tabindex="-1"><a class="header-anchor" href="#为什么把一个文件放入「exclude」选项中-它仍然会被编译器选中" aria-hidden="true">#</a> 为什么把一个文件放入「exclude」选项中，它仍然会被编译器选中？</h2><p><code>tsconfig.json</code> 将会把一个文件夹转换为「项目」，如果不指定任何 <code>exclude</code> 或者 <code>files</code>，则包含在 <code>tsconfig.json</code> 中的所有文件夹中的所有文件都会被包含在编译中。</p><p>如果你想忽略一些文件，使用 <code>exclude</code>。如果希望指定所有文件，而不是让编译器查找它们，请使用 <code>files</code>。</p><p>这些行为，<code>tsconfig.json</code> 将会自动确认。但是这有一个不同的问题，即是解析模块。模块解析：编译器将尝试去理解 <code>ns</code> 在模块语法中表示什么，即 <code>import * as ns from &#39;mod&#39;</code>。为了理解它，编译器需要定义一个模块，它可能是包含你自己代码的 .ts 文件，或者是导入的一个 .d.ts 文件。如果一个文件被找到，则无论它是否在 <code>excludes</code> 中，它都将会被编译。</p><p>因此，如果你想从编译中排除一个文件，你需要排除所有具有 <code>import</code> 或者 <code>&lt;reference path=&quot;...&quot;&gt;</code> 指令的文件。</p><p>使用 <code>tsc --listFiles</code> 来列出在编译时包含了哪些文件，<code>tsc --traceResolution</code> 来看看它们为什么会被包含在编译中。</p><h2 id="我怎么指定一个-include" tabindex="-1"><a class="header-anchor" href="#我怎么指定一个-include" aria-hidden="true">#</a> 我怎么指定一个 <code>include</code>？</h2><p>现在无法在 <code>tsconfig.json</code> 的 <code>include</code> 选项外指定所需要包含的文件。你可以通过以下任意一种方式获得相同的结果：1 使用 <code>files</code> 列表，2 在目录中添加 <code>///&lt;reference path=&quot;&quot;&gt;</code> 指令。</p><h2 id="当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误" tabindex="-1"><a class="header-anchor" href="#当我使用-javascript-文件时-为什么我会得到-error-ts5055-cannot-write-file-xxx-js-because-it-would-overwrite-input-file-错误" aria-hidden="true">#</a> 当我使用 JavaScript 文件时，为什么我会得到 <code>error TS5055: Cannot write file &#39;xxx.js&#39; because it would overwrite input file</code> 错误？</h2><p>对于 TypeScript 文件来说，在默认情况下，编译器将在同一目录中生成与 JavaScript 相同文件名的文件。因为 TypeScript 文件与编译后的文件总是拥有不同的后缀，这么做是安全的。然而，如果你设置 <code>allowJs</code> 编译选项为 <code>true</code> 和没有设置任何的编译输出属性（<code>outFile</code> 和 <code>outDir</code>），编译器将会尝试使用相同的规则来编译文件，这将导致发出的 JavaScript 文件与源文件具有相同的文件名。为了避免意外覆盖源文件，编译器将会发出此警告，并跳过编写输出文件。</p><p>有多种方法可以解决此问题，但所有这些方法都涉及配置编译器选项，因此建议你在项目根目录中的 tsconfig.json 文件来启用此功能。如果你不想编译 JavaScript 文件，你只需要将 <code>allowJs</code> 选项设置为 <code>false</code>；如果你确实想要包含和编译这些 JavaScript 文件，你应该设置 <code>outDir</code> 或者 <code>outFile</code> 选项，定向到其他位置，这样他们就不会与源文件冲突。如果你仅仅是想包含这些 JavaScript 文件，但是不需要编译，设置 <code>noEmit</code> 选项为 <code>true</code> 可以跳过编译检查。</p>',12),a=[i];function r(s,n){return o(),c("div",null,a)}const p=e(t,[["render",r],["__file","tsconfig-behavior.html.vue"]]);export{p as default};
