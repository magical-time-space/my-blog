const n=JSON.parse(`{"key":"v-d688ba8a","path":"/views/Books/Front-end/JustVue2/reactive/setters.html","title":"派发更新","lang":"zh-CN","frontmatter":{"description":"派发更新 通过上一节分析我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新，那么这一节我们来详细分析这个过程。 我们先来回顾一下 setter 部分的逻辑： /** * Define a reactive property on an Object. */ export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean ) { const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property &amp;&amp; property.configurable === false) { return } // cater for pre-defined getter/setters const getter = property &amp;&amp; property.get const setter = property &amp;&amp; property.set if ((!getter || setter) &amp;&amp; arguments.length === 2) { val = obj[key] } let childOb = !shallow &amp;&amp; observe(val) Object.defineProperty(obj, key, { enumerable: true, configurable: true, // ... set: function reactiveSetter (newVal) { const value = getter ? getter.call(obj) : val /* eslint-disable no-self-compare */ if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) { return } /* eslint-enable no-self-compare */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; customSetter) { customSetter() } if (setter) { setter.call(obj, newVal) } else { val = newVal } childOb = !shallow &amp;&amp; observe(newVal) dep.notify() } }) }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/JustVue2/reactive/setters.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"派发更新"}],["meta",{"property":"og:description","content":"派发更新 通过上一节分析我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新，那么这一节我们来详细分析这个过程。 我们先来回顾一下 setter 部分的逻辑： /** * Define a reactive property on an Object. */ export function defineReactive ( obj: Object, key: string, val: any, customSetter?: ?Function, shallow?: boolean ) { const dep = new Dep() const property = Object.getOwnPropertyDescriptor(obj, key) if (property &amp;&amp; property.configurable === false) { return } // cater for pre-defined getter/setters const getter = property &amp;&amp; property.get const setter = property &amp;&amp; property.set if ((!getter || setter) &amp;&amp; arguments.length === 2) { val = obj[key] } let childOb = !shallow &amp;&amp; observe(val) Object.defineProperty(obj, key, { enumerable: true, configurable: true, // ... set: function reactiveSetter (newVal) { const value = getter ? getter.call(obj) : val /* eslint-disable no-self-compare */ if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) { return } /* eslint-enable no-self-compare */ if (p​rocess.env.NODE_ENV !== 'production' &amp;&amp; customSetter) { customSetter() } if (setter) { setter.call(obj, newVal) } else { val = newVal } childOb = !shallow &amp;&amp; observe(newVal) dep.notify() } }) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"派发更新\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"过程分析","slug":"过程分析","link":"#过程分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":7.3,"words":2190},"filePathRelative":"views/Books/Front-end/JustVue2/reactive/setters.md","excerpt":"<h1> 派发更新</h1>\\n<p>通过上一节分析我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新，那么这一节我们来详细分析这个过程。</p>\\n<p>我们先来回顾一下 setter 部分的逻辑：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token doc-comment comment\\">/**\\n * Define a reactive property on an Object.\\n */</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">defineReactive</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token parameter\\"><span class=\\"token literal-property property\\">obj</span><span class=\\"token operator\\">:</span> Object<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> string<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">val</span><span class=\\"token operator\\">:</span> any<span class=\\"token punctuation\\">,</span>\\n  customSetter<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">?</span>Function<span class=\\"token punctuation\\">,</span>\\n  shallow<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> boolean</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> dep <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Dep</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">const</span> property <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwnPropertyDescriptor</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>configurable <span class=\\"token operator\\">===</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// cater for pre-defined getter/setters</span>\\n  <span class=\\"token keyword\\">const</span> getter <span class=\\"token operator\\">=</span> property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>get\\n  <span class=\\"token keyword\\">const</span> setter <span class=\\"token operator\\">=</span> property <span class=\\"token operator\\">&amp;&amp;</span> property<span class=\\"token punctuation\\">.</span>set\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>getter <span class=\\"token operator\\">||</span> setter<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> arguments<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    val <span class=\\"token operator\\">=</span> obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">let</span> childOb <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>shallow <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n  Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">defineProperty</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">enumerable</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">configurable</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// ...</span>\\n    <span class=\\"token function-variable function\\">set</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reactiveSetter</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">newVal</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> value <span class=\\"token operator\\">=</span> getter <span class=\\"token operator\\">?</span> <span class=\\"token function\\">getter</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> val\\n      <span class=\\"token comment\\">/* eslint-disable no-self-compare */</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>newVal <span class=\\"token operator\\">===</span> value <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>newVal <span class=\\"token operator\\">!==</span> newVal <span class=\\"token operator\\">&amp;&amp;</span> value <span class=\\"token operator\\">!==</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token comment\\">/* eslint-enable no-self-compare */</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>process<span class=\\"token punctuation\\">.</span>env<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">NODE_ENV</span> <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'production'</span> <span class=\\"token operator\\">&amp;&amp;</span> customSetter<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">customSetter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>setter<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">setter</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> newVal<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        val <span class=\\"token operator\\">=</span> newVal\\n      <span class=\\"token punctuation\\">}</span>\\n      childOb <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>shallow <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>newVal<span class=\\"token punctuation\\">)</span>\\n      dep<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">notify</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
