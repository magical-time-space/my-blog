const n=JSON.parse(`{"key":"v-0f7da378","path":"/views/Books/Front-end/TypescriptMaster/typings/freshness.html","title":"Freshness","lang":"zh-CN","frontmatter":{"description":"Freshness 为了能让检查对象字面量类型更容易，TypeScript 提供 「Freshness」 的概念（它也被称为更严格的对象字面量检查）用来确保对象字面量在结构上类型兼容。 结构类型非常方便。考虑如下例子代码，它可以让你非常便利的从 JavaScript 迁移至 TypeScript，并且会提供类型安全： function logName(something: { name: string }) { console.log(something.name); } const person = { name: 'matt', job: 'being awesome' }; const animal = { name: 'cow', diet: 'vegan, but has milk of own specie' }; const randow = { note: \`I don't have a name property\` }; logName(person); // ok logName(animal); // ok logName(randow); // Error: 没有 \`name\` 属性","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/freshness.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"Freshness"}],["meta",{"property":"og:description","content":"Freshness 为了能让检查对象字面量类型更容易，TypeScript 提供 「Freshness」 的概念（它也被称为更严格的对象字面量检查）用来确保对象字面量在结构上类型兼容。 结构类型非常方便。考虑如下例子代码，它可以让你非常便利的从 JavaScript 迁移至 TypeScript，并且会提供类型安全： function logName(something: { name: string }) { console.log(something.name); } const person = { name: 'matt', job: 'being awesome' }; const animal = { name: 'cow', diet: 'vegan, but has milk of own specie' }; const randow = { note: \`I don't have a name property\` }; logName(person); // ok logName(animal); // ok logName(randow); // Error: 没有 \`name\` 属性"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Freshness\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"允许额外的属性","slug":"允许额外的属性","link":"#允许额外的属性","children":[]},{"level":2,"title":"用例：React State","slug":"用例-react-state","link":"#用例-react-state","children":[]}],"git":{},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/freshness.md","excerpt":"<h1> Freshness</h1>\\n<p>为了能让检查对象字面量类型更容易，TypeScript 提供 「<a href=\\"https://github.com/Microsoft/TypeScript/pull/3823\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Freshness</a>」 的概念（它也被称为更严格的对象字面量检查）用来确保对象字面量在结构上类型兼容。</p>\\n<p>结构类型非常方便。考虑如下例子代码，它可以让你非常便利的从 JavaScript 迁移至 TypeScript，并且会提供类型安全：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">logName</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">something</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> string <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>something<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> person <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'matt'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'being awesome'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> animal <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'cow'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">diet</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'vegan, but has milk of own specie'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> randow <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">note</span><span class=\\"token operator\\">:</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">I don't have a name property</span><span class=\\"token template-punctuation string\\">\`</span></span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">logName</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// ok</span>\\n<span class=\\"token function\\">logName</span><span class=\\"token punctuation\\">(</span>animal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// ok</span>\\n<span class=\\"token function\\">logName</span><span class=\\"token punctuation\\">(</span>randow<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Error: 没有 \`name\` 属性</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
