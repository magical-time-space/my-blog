const n=JSON.parse('{"key":"v-32c06990","path":"/views/Books/Front-end/TypescriptMaster/typings/generices.html","title":"泛型","lang":"zh-CN","frontmatter":{"description":"泛型 设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是： 类的实例成员 类的方法 函数参数 函数返回值 动机和示例 下面是对一个先进先出的数据结构——队列，在 TypeScript 和 JavaScript 中的简单实现。 class Queue { private data = []; push = item =&gt; this.data.push(item); pop = () =&gt; this.data.shift(); }","head":[["meta",{"property":"og:url","content":"https://mpbug.gitee.io/views/Books/Front-end/TypescriptMaster/typings/generices.html"}],["meta",{"property":"og:site_name","content":"魔法Bug"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型 设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是： 类的实例成员 类的方法 函数参数 函数返回值 动机和示例 下面是对一个先进先出的数据结构——队列，在 TypeScript 和 JavaScript 中的简单实现。 class Queue { private data = []; push = item =&gt; this.data.push(item); pop = () =&gt; this.data.shift(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"魔法时空宝库"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"魔法时空宝库\\",\\"url\\":\\"https://mpbug.gitee.io/player/\\"}]}"]]},"headers":[{"level":2,"title":"动机和示例","slug":"动机和示例","link":"#动机和示例","children":[]},{"level":2,"title":"误用的泛型","slug":"误用的泛型","link":"#误用的泛型","children":[]},{"level":2,"title":"设计模式：方便通用","slug":"设计模式-方便通用","link":"#设计模式-方便通用","children":[{"level":3,"title":"配合 axios 使用","slug":"配合-axios-使用","link":"#配合-axios-使用","children":[]}]}],"git":{},"readingTime":{"minutes":4.53,"words":1359},"filePathRelative":"views/Books/Front-end/TypescriptMaster/typings/generices.md","excerpt":"<h1> 泛型</h1>\\n<p>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：</p>\\n<ul>\\n<li>类的实例成员</li>\\n<li>类的方法</li>\\n<li>函数参数</li>\\n<li>函数返回值</li>\\n</ul>\\n<h2> 动机和示例</h2>\\n<p>下面是对一个先进先出的数据结构——队列，在 <code>TypeScript</code> 和 <code>JavaScript</code> 中的简单实现。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Queue</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function-variable function\\">push</span> <span class=\\"token operator\\">=</span> item <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function-variable function\\">pop</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
