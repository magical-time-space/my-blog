import{_ as n,X as s,Y as a,a4 as e}from"./framework-d8252107.js";const t={},o=e(`<h1 id="jsx-和-react" tabindex="-1"><a class="header-anchor" href="#jsx-和-react" aria-hidden="true">#</a> JSX 和 React</h1><h2 id="我写了声明-declare-var-mycomponent-react-component-为什么我不能写-mycomponent" tabindex="-1"><a class="header-anchor" href="#我写了声明-declare-var-mycomponent-react-component-为什么我不能写-mycomponent" aria-hidden="true">#</a> 我写了声明 <code>declare var MyComponent: React.Component</code>，为什么我不能写 <code>&lt;MyComponent /&gt;</code></h2><blockquote><p>我写下了如下代码，为什么会抛出错误？</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Display</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> SomeThing<span class="token operator">:</span> Display <span class="token operator">=</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>
<span class="token comment">// Error here, isn&#39;t this OK?</span>
<span class="token keyword">let</span> jsx <span class="token operator">=</span> <span class="token operator">&lt;</span>SomeThing <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可能是把类的实例与静态类混淆了。当 React 实例化一个组件时，它在调用构造函数。因此当 TypeScript 看到一个 JSX 标签 <code>&lt;TagName&gt;</code> 时，它在验证构造函数 <code>TagName</code> 的结果是否可以产生有效组件。</p><p>但是这个声明 <code>let someThing: Display</code> 只是表明了 <code>someThing</code> 是类的实例，并不是类的构造函数。实际上，他会在运行时抛出错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> SomeThing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> jsx <span class="token operator">=</span> <span class="token operator">&lt;</span>SomeThing <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Not gonna work</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最简单的修复方式是使用 <code>typeof</code> 操作符：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> SomeThing<span class="token operator">:</span> <span class="token keyword">typeof</span> Display <span class="token operator">=</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),p=[o];function c(l,r){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","jsx-and-react.html.vue"]]);export{d as default};
