import{_ as n,X as a,Y as s,a4 as e}from"./framework-d8252107.js";const t={},c=e(`<h1 id="检查器" tabindex="-1"><a class="header-anchor" href="#检查器" aria-hidden="true">#</a> 检查器</h1><p>如前所述，<em>检查器</em>使得 TypeScript 更独特，比<em>其它 JavaScript 转译器</em>更强大。检查器位于 <code>checker.ts</code> 中，当前有 23k 行以上的代码（编译器中最大的部分）</p><h3 id="程序对检查器的使用" tabindex="-1"><a class="header-anchor" href="#程序对检查器的使用" aria-hidden="true">#</a> 程序对检查器的使用</h3><p>检查器是由程序初始化，下面是调用栈示意（绑定器一节也展示过）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>program.getTypeChecker -&gt;
    ts.createTypeChecker（检查器中）-&gt;
        initializeTypeChecker（检查器中） -&gt;
            for each SourceFile \`ts.bindSourceFile\`（绑定器中）
            // 接着
            for each SourceFile \`ts.mergeSymbolTable\`（检查器中）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与发射器的联系" tabindex="-1"><a class="header-anchor" href="#与发射器的联系" aria-hidden="true">#</a> 与发射器的联系</h3><p>真正的类型检查会在调用 <code>getDiagnostics</code> 时才发生。该函数被调用时（比如由 <code>Program.emit</code> 请求），检查器返回一个 <code>EmitResolver</code>（由程序调用检查器的 <code>getEmitResolver</code> 函数得到），<code>EmitResolver</code> 是 <code>createTypeChecker</code> 的一个本地函数的集合。介绍发射器时还会再次提到。</p><p>下面是该过程直到 <code>checkSourceFile</code> 的调用栈（<code>checkSourceFile</code> 是 <code>createTypeChecker</code> 的一个本地函数）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>program.emit -&gt;
    emitWorker (program local) -&gt;
        createTypeChecker.getEmitResolver -&gt;
            // 第一次调用下面的几个 createTypeChecker 的本地函数
            call getDiagnostics -&gt;
                getDiagnosticsWorker -&gt;
                    checkSourceFile

            // 接着
            return resolver
            // 通过对本地函数 createResolver() 的调用，resolver 已在 createTypeChecker 中初始化。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局命名空间合并" tabindex="-1"><a class="header-anchor" href="#全局命名空间合并" aria-hidden="true">#</a> 全局命名空间合并</h2><p><code>initializeTypeChecker</code> 中存在以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 初始化全局符号表（SymbolTable）。</span>
<span class="token function">forEach</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">getSourceFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExternalModule</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mergeSymbolTable</span><span class="token punctuation">(</span>globals<span class="token punctuation">,</span> file<span class="token punctuation">.</span>locals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上是将所有的 <code>global</code> 符号合并到 <code>let globals: SymbolTable = {}</code> 符号表中（位于 <code>createTypeChecker</code> 中）。 <code>mergeSymbolTable</code> 主要调用 <code>mergeSymbol</code> 函数。</p><h2 id="检查器错误报告" tabindex="-1"><a class="header-anchor" href="#检查器错误报告" aria-hidden="true">#</a> 检查器错误报告</h2><p>检查器使用本地的 <code>error</code> 函数报告错误，如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>location<span class="token operator">:</span> Node<span class="token punctuation">,</span> message<span class="token operator">:</span> DiagnosticMessage<span class="token punctuation">,</span> arg0<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> arg1<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> arg2<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> diagnostic <span class="token operator">=</span> location
    <span class="token operator">?</span> <span class="token function">createDiagnosticForNode</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> message<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">createCompilerDiagnostic</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  diagnostics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>diagnostic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[c];function i(p,l){return a(),s("div",null,o)}const d=n(t,[["render",i],["__file","checker.html.vue"]]);export{d as default};
