import{_ as e,X as a,Y as r,a4 as s}from"./framework-d8252107.js";const d={},i=s(`<h1 id="vue-js-源码目录设计" tabindex="-1"><a class="header-anchor" href="#vue-js-源码目录设计" aria-hidden="true">#</a> Vue.js 源码目录设计</h1><p>Vue.js 的源码都在 src 目录下，其目录结构如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src
├── compiler        # 编译相关 
├── core            # 核心代码 
├── platforms       # 不同平台的支持
├── server          # 服务端渲染
├── sfc             # .vue 文件解析
├── shared          # 共享代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> compiler</h2><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。</p><p>编译的工作可以在构建时做（借助 webpack、vue-loader 等辅助插件）；也可以在运行时做，使用包含构建功能的 Vue.js。显然，编译是一项耗性能的工作，所以更推荐前者——离线编译。</p><h2 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> core</h2><p>core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，Vue 实例化、观察者、虚拟 DOM、工具函数等等。</p><p>这里的代码可谓是 Vue.js 的灵魂，也是我们之后需要重点分析的地方。</p><h2 id="platform" tabindex="-1"><a class="header-anchor" href="#platform" aria-hidden="true">#</a> platform</h2><p>Vue.js 是一个跨平台的 MVVM 框架，它可以跑在 web 上，也可以配合 weex 跑在 native 客户端上。platform 是 Vue.js 的入口，2 个目录代表 2 个主要入口，分别打包成运行在 web 上和 weex 上的 Vue.js。</p><p>我们会重点分析 web 入口打包后的 Vue.js，对于 weex 入口打包的 Vue.js，感兴趣的同学可以自行研究。</p><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h2><p>Vue.js 2.0 支持了服务端渲染，所有服务端渲染相关的逻辑都在这个目录下。注意：这部分代码是跑在服务端的 Node.js，不要和跑在浏览器端的 Vue.js 混为一谈。</p><p>服务端渲染主要的工作是把组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将静态标记&quot;混合&quot;为客户端上完全交互的应用程序。</p><h2 id="sfc" tabindex="-1"><a class="header-anchor" href="#sfc" aria-hidden="true">#</a> sfc</h2><p>通常我们开发 Vue.js 都会借助 webpack 构建， 然后通过 .vue 单文件来编写组件。</p><p>这个目录下的代码逻辑会把 .vue 文件内容解析成一个 JavaScript 的对象。</p><h2 id="shared" tabindex="-1"><a class="header-anchor" href="#shared" aria-hidden="true">#</a> shared</h2><p>Vue.js 会定义一些工具方法，这里定义的工具方法都是会被浏览器端的 Vue.js 和服务端的 Vue.js 所共享的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从 Vue.js 的目录设计可以看到，作者把功能模块拆分的非常清楚，相关的逻辑放在一个独立的目录下维护，并且把复用的代码也抽成一个独立目录。</p><p>这样的目录设计让代码的阅读性和可维护性都变强，是非常值得学习和推敲的。</p>`,23),n=[i];function c(h,t){return a(),r("div",null,n)}const l=e(d,[["render",c],["__file","directory.html.vue"]]);export{l as default};
